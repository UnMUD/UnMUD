Libraries/BasicLib/BasicLibFiles.cpp:4:55: warning: code should be clang-formatted [-Wclang-format-violations]
// BasicLibFiles.h - This file contains file functions
                                                      ^
Libraries/BasicLib/BasicLibFiles.cpp:10:2: warning: code should be clang-formatted [-Wclang-format-violations]
#   include "Windows.h"
 ^
Libraries/BasicLib/BasicLibFiles.cpp:12:1: warning: code should be clang-formatted [-Wclang-format-violations]
#   include <sys/types.h>
^
Libraries/BasicLib/BasicLibFiles.cpp:16:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibFiles.cpp:17:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibFiles.cpp:19:26: warning: code should be clang-formatted [-Wclang-format-violations]
    filelist GetFileList( const std::string p_directory )
                         ^
Libraries/BasicLib/BasicLibFiles.cpp:19:56: warning: code should be clang-formatted [-Wclang-format-violations]
    filelist GetFileList( const std::string p_directory )
                                                       ^
Libraries/BasicLib/BasicLibFiles.cpp:19:58: warning: code should be clang-formatted [-Wclang-format-violations]
    filelist GetFileList( const std::string p_directory )
                                                         ^
Libraries/BasicLib/BasicLibFiles.cpp:20:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibFiles.cpp:22:2: warning: code should be clang-formatted [-Wclang-format-violations]
#   ifdef WIN32
 ^
Libraries/BasicLib/BasicLibFiles.cpp:22:16: warning: code should be clang-formatted [-Wclang-format-violations]
#   ifdef WIN32
               ^
Libraries/BasicLib/BasicLibFiles.cpp:23:46: warning: code should be clang-formatted [-Wclang-format-violations]
        std::string mask = p_directory + "*";
                                             ^
Libraries/BasicLib/BasicLibFiles.cpp:24:27: warning: code should be clang-formatted [-Wclang-format-violations]
        WIN32_FIND_DATA d;
                          ^
Libraries/BasicLib/BasicLibFiles.cpp:25:34: warning: code should be clang-formatted [-Wclang-format-violations]
        HANDLE h = FindFirstFile( mask.c_str(), &d );
                                 ^
Libraries/BasicLib/BasicLibFiles.cpp:25:51: warning: code should be clang-formatted [-Wclang-format-violations]
        HANDLE h = FindFirstFile( mask.c_str(), &d );
                                                  ^
Libraries/BasicLib/BasicLibFiles.cpp:25:54: warning: code should be clang-formatted [-Wclang-format-violations]
        HANDLE h = FindFirstFile( mask.c_str(), &d );
                                                     ^
Libraries/BasicLib/BasicLibFiles.cpp:27:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( h != INVALID_HANDLE_VALUE )
          ^
Libraries/BasicLib/BasicLibFiles.cpp:27:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( h != INVALID_HANDLE_VALUE )
           ^
Libraries/BasicLib/BasicLibFiles.cpp:27:38: warning: code should be clang-formatted [-Wclang-format-violations]
        if( h != INVALID_HANDLE_VALUE )
                                     ^
Libraries/BasicLib/BasicLibFiles.cpp:27:40: warning: code should be clang-formatted [-Wclang-format-violations]
        if( h != INVALID_HANDLE_VALUE )
                                       ^
Libraries/BasicLib/BasicLibFiles.cpp:28:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibFiles.cpp:29:30: warning: code should be clang-formatted [-Wclang-format-violations]
            bool next = true;
                             ^
Libraries/BasicLib/BasicLibFiles.cpp:30:18: warning: code should be clang-formatted [-Wclang-format-violations]
            while( next )
                 ^
Libraries/BasicLib/BasicLibFiles.cpp:30:19: warning: code should be clang-formatted [-Wclang-format-violations]
            while( next )
                  ^
Libraries/BasicLib/BasicLibFiles.cpp:30:24: warning: code should be clang-formatted [-Wclang-format-violations]
            while( next )
                       ^
Libraries/BasicLib/BasicLibFiles.cpp:30:26: warning: code should be clang-formatted [-Wclang-format-violations]
            while( next )
                         ^
Libraries/BasicLib/BasicLibFiles.cpp:31:14: warning: code should be clang-formatted [-Wclang-format-violations]
            {
             ^
Libraries/BasicLib/BasicLibFiles.cpp:32:26: warning: code should be clang-formatted [-Wclang-format-violations]
                s.insert( p_directory + d.cFileName );
                         ^
Libraries/BasicLib/BasicLibFiles.cpp:32:52: warning: code should be clang-formatted [-Wclang-format-violations]
                s.insert( p_directory + d.cFileName );
                                                   ^
Libraries/BasicLib/BasicLibFiles.cpp:32:55: warning: code should be clang-formatted [-Wclang-format-violations]
                s.insert( p_directory + d.cFileName );
                                                      ^
Libraries/BasicLib/BasicLibFiles.cpp:33:37: warning: code should be clang-formatted [-Wclang-format-violations]
                next = FindNextFile( h, &d );
                                    ^
Libraries/BasicLib/BasicLibFiles.cpp:33:43: warning: code should be clang-formatted [-Wclang-format-violations]
                next = FindNextFile( h, &d );
                                          ^
Libraries/BasicLib/BasicLibFiles.cpp:33:46: warning: code should be clang-formatted [-Wclang-format-violations]
                next = FindNextFile( h, &d );
                                             ^
Libraries/BasicLib/BasicLibFiles.cpp:34:14: warning: code should be clang-formatted [-Wclang-format-violations]
            }
             ^
Libraries/BasicLib/BasicLibFiles.cpp:36:2: warning: code should be clang-formatted [-Wclang-format-violations]
#   else
 ^
Libraries/BasicLib/BasicLibFiles.cpp:36:9: warning: code should be clang-formatted [-Wclang-format-violations]
#   else
        ^
Libraries/BasicLib/BasicLibFiles.cpp:37:12: warning: code should be clang-formatted [-Wclang-format-violations]
        DIR* d = opendir( p_directory.c_str() );
           ^
Libraries/BasicLib/BasicLibFiles.cpp:37:13: warning: code should be clang-formatted [-Wclang-format-violations]
        DIR* d = opendir( p_directory.c_str() );
            ^
Libraries/BasicLib/BasicLibFiles.cpp:37:26: warning: code should be clang-formatted [-Wclang-format-violations]
        DIR* d = opendir( p_directory.c_str() );
                         ^
Libraries/BasicLib/BasicLibFiles.cpp:37:46: warning: code should be clang-formatted [-Wclang-format-violations]
        DIR* d = opendir( p_directory.c_str() );
                                             ^
Libraries/BasicLib/BasicLibFiles.cpp:37:49: warning: code should be clang-formatted [-Wclang-format-violations]
        DIR* d = opendir( p_directory.c_str() );
                                                ^
Libraries/BasicLib/BasicLibFiles.cpp:38:15: warning: code should be clang-formatted [-Wclang-format-violations]
        dirent* ent = readdir( d );
              ^
Libraries/BasicLib/BasicLibFiles.cpp:38:16: warning: code should be clang-formatted [-Wclang-format-violations]
        dirent* ent = readdir( d );
               ^
Libraries/BasicLib/BasicLibFiles.cpp:38:31: warning: code should be clang-formatted [-Wclang-format-violations]
        dirent* ent = readdir( d );
                              ^
Libraries/BasicLib/BasicLibFiles.cpp:38:33: warning: code should be clang-formatted [-Wclang-format-violations]
        dirent* ent = readdir( d );
                                ^
Libraries/BasicLib/BasicLibFiles.cpp:38:36: warning: code should be clang-formatted [-Wclang-format-violations]
        dirent* ent = readdir( d );
                                   ^
Libraries/BasicLib/BasicLibFiles.cpp:40:14: warning: code should be clang-formatted [-Wclang-format-violations]
        while( ent != 0 )
             ^
Libraries/BasicLib/BasicLibFiles.cpp:40:15: warning: code should be clang-formatted [-Wclang-format-violations]
        while( ent != 0 )
              ^
Libraries/BasicLib/BasicLibFiles.cpp:40:24: warning: code should be clang-formatted [-Wclang-format-violations]
        while( ent != 0 )
                       ^
Libraries/BasicLib/BasicLibFiles.cpp:40:26: warning: code should be clang-formatted [-Wclang-format-violations]
        while( ent != 0 )
                         ^
Libraries/BasicLib/BasicLibFiles.cpp:41:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibFiles.cpp:42:22: warning: code should be clang-formatted [-Wclang-format-violations]
            s.insert( p_directory + ent->d_name );
                     ^
Libraries/BasicLib/BasicLibFiles.cpp:42:48: warning: code should be clang-formatted [-Wclang-format-violations]
            s.insert( p_directory + ent->d_name );
                                               ^
Libraries/BasicLib/BasicLibFiles.cpp:42:51: warning: code should be clang-formatted [-Wclang-format-violations]
            s.insert( p_directory + ent->d_name );
                                                  ^
Libraries/BasicLib/BasicLibFiles.cpp:43:27: warning: code should be clang-formatted [-Wclang-format-violations]
            ent = readdir( d );
                          ^
Libraries/BasicLib/BasicLibFiles.cpp:43:29: warning: code should be clang-formatted [-Wclang-format-violations]
            ent = readdir( d );
                            ^
Libraries/BasicLib/BasicLibFiles.cpp:43:32: warning: code should be clang-formatted [-Wclang-format-violations]
            ent = readdir( d );
                               ^
Libraries/BasicLib/BasicLibFiles.cpp:45:2: warning: code should be clang-formatted [-Wclang-format-violations]
#   endif
 ^
Libraries/BasicLib/BasicLibFiles.cpp:45:10: warning: code should be clang-formatted [-Wclang-format-violations]
#   endif
         ^
Libraries/BasicLib/BasicLibFiles.cpp:46:18: warning: code should be clang-formatted [-Wclang-format-violations]
        return s;
                 ^
Libraries/BasicLib/BasicLibRandom.cpp:4:76: warning: code should be clang-formatted [-Wclang-format-violations]
// BasicLibRandom.cpp - This file contains random number related functions.
                                                                           ^
Libraries/BasicLib/BasicLibRandom.cpp:10:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibRandom.cpp:15:15: warning: code should be clang-formatted [-Wclang-format-violations]
random Random( 0 );
              ^
Libraries/BasicLib/BasicLibRandom.cpp:15:17: warning: code should be clang-formatted [-Wclang-format-violations]
random Random( 0 );
                ^
Libraries/BasicLib/BasicLibRandom.cpp:22:33: warning: code should be clang-formatted [-Wclang-format-violations]
random_binomial RandomIntNormal;
                                ^
Libraries/BasicLib/BasicLibString.cpp:5:33: warning: code should be clang-formatted [-Wclang-format-violations]
//                      library.
                                ^
Libraries/BasicLib/BasicLibString.cpp:12:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibString.cpp:14:23: warning: code should be clang-formatted [-Wclang-format-violations]
std::string UpperCase( const std::string& p_string )
                      ^
Libraries/BasicLib/BasicLibString.cpp:14:41: warning: code should be clang-formatted [-Wclang-format-violations]
std::string UpperCase( const std::string& p_string )
                                        ^
Libraries/BasicLib/BasicLibString.cpp:14:42: warning: code should be clang-formatted [-Wclang-format-violations]
std::string UpperCase( const std::string& p_string )
                                         ^
Libraries/BasicLib/BasicLibString.cpp:14:51: warning: code should be clang-formatted [-Wclang-format-violations]
std::string UpperCase( const std::string& p_string )
                                                  ^
Libraries/BasicLib/BasicLibString.cpp:14:53: warning: code should be clang-formatted [-Wclang-format-violations]
std::string UpperCase( const std::string& p_string )
                                                    ^
Libraries/BasicLib/BasicLibString.cpp:15:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibString.cpp:16:32: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string str = p_string;
                               ^
Libraries/BasicLib/BasicLibString.cpp:18:8: warning: code should be clang-formatted [-Wclang-format-violations]
    for( size_t i = 0; i < str.size(); i++ )
       ^
Libraries/BasicLib/BasicLibString.cpp:18:9: warning: code should be clang-formatted [-Wclang-format-violations]
    for( size_t i = 0; i < str.size(); i++ )
        ^
Libraries/BasicLib/BasicLibString.cpp:18:43: warning: code should be clang-formatted [-Wclang-format-violations]
    for( size_t i = 0; i < str.size(); i++ )
                                          ^
Libraries/BasicLib/BasicLibString.cpp:18:45: warning: code should be clang-formatted [-Wclang-format-violations]
    for( size_t i = 0; i < str.size(); i++ )
                                            ^
Libraries/BasicLib/BasicLibString.cpp:19:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.cpp:20:26: warning: code should be clang-formatted [-Wclang-format-violations]
        str[i] = toupper( str[i] );
                         ^
Libraries/BasicLib/BasicLibString.cpp:20:33: warning: code should be clang-formatted [-Wclang-format-violations]
        str[i] = toupper( str[i] );
                                ^
Libraries/BasicLib/BasicLibString.cpp:20:36: warning: code should be clang-formatted [-Wclang-format-violations]
        str[i] = toupper( str[i] );
                                   ^
Libraries/BasicLib/BasicLibString.cpp:21:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.cpp:25:23: warning: code should be clang-formatted [-Wclang-format-violations]
std::string LowerCase( const std::string& p_string )
                      ^
Libraries/BasicLib/BasicLibString.cpp:25:41: warning: code should be clang-formatted [-Wclang-format-violations]
std::string LowerCase( const std::string& p_string )
                                        ^
Libraries/BasicLib/BasicLibString.cpp:25:42: warning: code should be clang-formatted [-Wclang-format-violations]
std::string LowerCase( const std::string& p_string )
                                         ^
Libraries/BasicLib/BasicLibString.cpp:25:51: warning: code should be clang-formatted [-Wclang-format-violations]
std::string LowerCase( const std::string& p_string )
                                                  ^
Libraries/BasicLib/BasicLibString.cpp:25:53: warning: code should be clang-formatted [-Wclang-format-violations]
std::string LowerCase( const std::string& p_string )
                                                    ^
Libraries/BasicLib/BasicLibString.cpp:26:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibString.cpp:27:32: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string str = p_string;
                               ^
Libraries/BasicLib/BasicLibString.cpp:29:8: warning: code should be clang-formatted [-Wclang-format-violations]
    for( size_t i = 0; i < str.size(); i++ )
       ^
Libraries/BasicLib/BasicLibString.cpp:29:9: warning: code should be clang-formatted [-Wclang-format-violations]
    for( size_t i = 0; i < str.size(); i++ )
        ^
Libraries/BasicLib/BasicLibString.cpp:29:43: warning: code should be clang-formatted [-Wclang-format-violations]
    for( size_t i = 0; i < str.size(); i++ )
                                          ^
Libraries/BasicLib/BasicLibString.cpp:29:45: warning: code should be clang-formatted [-Wclang-format-violations]
    for( size_t i = 0; i < str.size(); i++ )
                                            ^
Libraries/BasicLib/BasicLibString.cpp:30:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.cpp:31:26: warning: code should be clang-formatted [-Wclang-format-violations]
        str[i] = tolower( str[i] );
                         ^
Libraries/BasicLib/BasicLibString.cpp:31:33: warning: code should be clang-formatted [-Wclang-format-violations]
        str[i] = tolower( str[i] );
                                ^
Libraries/BasicLib/BasicLibString.cpp:31:36: warning: code should be clang-formatted [-Wclang-format-violations]
        str[i] = tolower( str[i] );
                                   ^
Libraries/BasicLib/BasicLibString.cpp:32:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.cpp:34:2: warning: code should be clang-formatted [-Wclang-format-violations]
}
 ^
Libraries/BasicLib/BasicLibString.cpp:38:30: warning: code should be clang-formatted [-Wclang-format-violations]
std::string SearchAndReplace( 
                             ^
Libraries/BasicLib/BasicLibString.cpp:39:22: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_target,
                     ^
Libraries/BasicLib/BasicLibString.cpp:39:23: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_target,
                      ^
Libraries/BasicLib/BasicLibString.cpp:39:33: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_target,
                                ^
Libraries/BasicLib/BasicLibString.cpp:40:22: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_search,
                     ^
Libraries/BasicLib/BasicLibString.cpp:40:23: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_search,
                      ^
Libraries/BasicLib/BasicLibString.cpp:40:33: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_search,
                                ^
Libraries/BasicLib/BasicLibString.cpp:41:22: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_replace )
                     ^
Libraries/BasicLib/BasicLibString.cpp:41:23: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_replace )
                      ^
Libraries/BasicLib/BasicLibString.cpp:41:33: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_replace )
                                ^
Libraries/BasicLib/BasicLibString.cpp:41:35: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_replace )
                                  ^
Libraries/BasicLib/BasicLibString.cpp:42:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibString.cpp:43:21: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string str( p_target );
                    ^
Libraries/BasicLib/BasicLibString.cpp:43:30: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string str( p_target );
                             ^
Libraries/BasicLib/BasicLibString.cpp:43:33: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string str( p_target );
                                ^
Libraries/BasicLib/BasicLibString.cpp:44:41: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string::size_type i = str.find( p_search );
                                        ^
Libraries/BasicLib/BasicLibString.cpp:44:50: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string::size_type i = str.find( p_search );
                                                 ^
Libraries/BasicLib/BasicLibString.cpp:44:53: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string::size_type i = str.find( p_search );
                                                    ^
Libraries/BasicLib/BasicLibString.cpp:46:43: warning: code should be clang-formatted [-Wclang-format-violations]
    // loop while replacing all occurances
                                          ^
Libraries/BasicLib/BasicLibString.cpp:47:10: warning: code should be clang-formatted [-Wclang-format-violations]
    while( i != std::string::npos )
         ^
Libraries/BasicLib/BasicLibString.cpp:47:11: warning: code should be clang-formatted [-Wclang-format-violations]
    while( i != std::string::npos )
          ^
Libraries/BasicLib/BasicLibString.cpp:47:34: warning: code should be clang-formatted [-Wclang-format-violations]
    while( i != std::string::npos )
                                 ^
Libraries/BasicLib/BasicLibString.cpp:47:36: warning: code should be clang-formatted [-Wclang-format-violations]
    while( i != std::string::npos )
                                   ^
Libraries/BasicLib/BasicLibString.cpp:48:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.cpp:49:21: warning: code should be clang-formatted [-Wclang-format-violations]
        str.replace( i, p_search.size(), p_replace );
                    ^
Libraries/BasicLib/BasicLibString.cpp:49:51: warning: code should be clang-formatted [-Wclang-format-violations]
        str.replace( i, p_search.size(), p_replace );
                                                  ^
Libraries/BasicLib/BasicLibString.cpp:49:54: warning: code should be clang-formatted [-Wclang-format-violations]
        str.replace( i, p_search.size(), p_replace );
                                                     ^
Libraries/BasicLib/BasicLibString.cpp:50:22: warning: code should be clang-formatted [-Wclang-format-violations]
        i = str.find( p_search, i + 1 );
                     ^
Libraries/BasicLib/BasicLibString.cpp:50:38: warning: code should be clang-formatted [-Wclang-format-violations]
        i = str.find( p_search, i + 1 );
                                     ^
Libraries/BasicLib/BasicLibString.cpp:50:41: warning: code should be clang-formatted [-Wclang-format-violations]
        i = str.find( p_search, i + 1 );
                                        ^
Libraries/BasicLib/BasicLibString.cpp:51:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.cpp:54:2: warning: code should be clang-formatted [-Wclang-format-violations]
}
 ^
Libraries/BasicLib/BasicLibString.cpp:58:28: warning: code should be clang-formatted [-Wclang-format-violations]
std::string TrimWhitespace( const std::string& p_string )
                           ^
Libraries/BasicLib/BasicLibString.cpp:58:46: warning: code should be clang-formatted [-Wclang-format-violations]
std::string TrimWhitespace( const std::string& p_string )
                                             ^
Libraries/BasicLib/BasicLibString.cpp:58:47: warning: code should be clang-formatted [-Wclang-format-violations]
std::string TrimWhitespace( const std::string& p_string )
                                              ^
Libraries/BasicLib/BasicLibString.cpp:58:56: warning: code should be clang-formatted [-Wclang-format-violations]
std::string TrimWhitespace( const std::string& p_string )
                                                       ^
Libraries/BasicLib/BasicLibString.cpp:58:58: warning: code should be clang-formatted [-Wclang-format-violations]
std::string TrimWhitespace( const std::string& p_string )
                                                         ^
Libraries/BasicLib/BasicLibString.cpp:59:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibString.cpp:60:13: warning: code should be clang-formatted [-Wclang-format-violations]
    int wsf;
            ^
Libraries/BasicLib/BasicLibString.cpp:61:13: warning: code should be clang-formatted [-Wclang-format-violations]
    int wsb;
            ^
Libraries/BasicLib/BasicLibString.cpp:63:22: warning: code should be clang-formatted [-Wclang-format-violations]
    // trim the front
                     ^
Libraries/BasicLib/BasicLibString.cpp:64:38: warning: code should be clang-formatted [-Wclang-format-violations]
    wsf = p_string.find_first_not_of( WHITESPACE );
                                     ^
Libraries/BasicLib/BasicLibString.cpp:64:49: warning: code should be clang-formatted [-Wclang-format-violations]
    wsf = p_string.find_first_not_of( WHITESPACE );
                                                ^
Libraries/BasicLib/BasicLibString.cpp:64:52: warning: code should be clang-formatted [-Wclang-format-violations]
    wsf = p_string.find_first_not_of( WHITESPACE );
                                                   ^
Libraries/BasicLib/BasicLibString.cpp:65:37: warning: code should be clang-formatted [-Wclang-format-violations]
    wsb = p_string.find_last_not_of( WHITESPACE );
                                    ^
Libraries/BasicLib/BasicLibString.cpp:65:48: warning: code should be clang-formatted [-Wclang-format-violations]
    wsb = p_string.find_last_not_of( WHITESPACE );
                                               ^
Libraries/BasicLib/BasicLibString.cpp:65:51: warning: code should be clang-formatted [-Wclang-format-violations]
    wsb = p_string.find_last_not_of( WHITESPACE );
                                                  ^
Libraries/BasicLib/BasicLibString.cpp:67:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wsf == std::string::npos )
      ^
Libraries/BasicLib/BasicLibString.cpp:67:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wsf == std::string::npos )
       ^
Libraries/BasicLib/BasicLibString.cpp:67:33: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wsf == std::string::npos )
                                ^
Libraries/BasicLib/BasicLibString.cpp:67:35: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wsf == std::string::npos )
                                  ^
Libraries/BasicLib/BasicLibString.cpp:68:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.cpp:69:17: warning: code should be clang-formatted [-Wclang-format-violations]
        wsf = 0;
                ^
Libraries/BasicLib/BasicLibString.cpp:70:18: warning: code should be clang-formatted [-Wclang-format-violations]
        wsb = -1;
                 ^
Libraries/BasicLib/BasicLibString.cpp:71:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.cpp:73:28: warning: code should be clang-formatted [-Wclang-format-violations]
    return p_string.substr( wsf, wsb - wsf + 1 );
                           ^
Libraries/BasicLib/BasicLibString.cpp:73:47: warning: code should be clang-formatted [-Wclang-format-violations]
    return p_string.substr( wsf, wsb - wsf + 1 );
                                              ^
Libraries/BasicLib/BasicLibString.cpp:74:2: warning: code should be clang-formatted [-Wclang-format-violations]
}
 ^
Libraries/BasicLib/BasicLibString.cpp:77:23: warning: code should be clang-formatted [-Wclang-format-violations]
std::string ParseWord( const std::string& p_string, int p_index )
                      ^
Libraries/BasicLib/BasicLibString.cpp:77:41: warning: code should be clang-formatted [-Wclang-format-violations]
std::string ParseWord( const std::string& p_string, int p_index )
                                        ^
Libraries/BasicLib/BasicLibString.cpp:77:42: warning: code should be clang-formatted [-Wclang-format-violations]
std::string ParseWord( const std::string& p_string, int p_index )
                                         ^
Libraries/BasicLib/BasicLibString.cpp:77:64: warning: code should be clang-formatted [-Wclang-format-violations]
std::string ParseWord( const std::string& p_string, int p_index )
                                                               ^
Libraries/BasicLib/BasicLibString.cpp:77:66: warning: code should be clang-formatted [-Wclang-format-violations]
std::string ParseWord( const std::string& p_string, int p_index )
                                                                 ^
Libraries/BasicLib/BasicLibString.cpp:78:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibString.cpp:79:42: warning: code should be clang-formatted [-Wclang-format-violations]
    int wss = p_string.find_first_not_of( WHITESPACE );
                                         ^
Libraries/BasicLib/BasicLibString.cpp:79:53: warning: code should be clang-formatted [-Wclang-format-violations]
    int wss = p_string.find_first_not_of( WHITESPACE );
                                                    ^
Libraries/BasicLib/BasicLibString.cpp:79:56: warning: code should be clang-formatted [-Wclang-format-violations]
    int wss = p_string.find_first_not_of( WHITESPACE );
                                                       ^
Libraries/BasicLib/BasicLibString.cpp:81:10: warning: code should be clang-formatted [-Wclang-format-violations]
    while( p_index > 0 )
         ^
Libraries/BasicLib/BasicLibString.cpp:81:11: warning: code should be clang-formatted [-Wclang-format-violations]
    while( p_index > 0 )
          ^
Libraries/BasicLib/BasicLibString.cpp:81:23: warning: code should be clang-formatted [-Wclang-format-violations]
    while( p_index > 0 )
                      ^
Libraries/BasicLib/BasicLibString.cpp:81:25: warning: code should be clang-formatted [-Wclang-format-violations]
    while( p_index > 0 )
                        ^
Libraries/BasicLib/BasicLibString.cpp:82:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.cpp:83:19: warning: code should be clang-formatted [-Wclang-format-violations]
        p_index--;
                  ^
Libraries/BasicLib/BasicLibString.cpp:85:70: warning: code should be clang-formatted [-Wclang-format-violations]
        // find the beginning of the next word, by finding whitespace
                                                                     ^
Libraries/BasicLib/BasicLibString.cpp:86:73: warning: code should be clang-formatted [-Wclang-format-violations]
        // to end the current word, and then non-whitespace at the start
                                                                        ^
Libraries/BasicLib/BasicLibString.cpp:87:28: warning: code should be clang-formatted [-Wclang-format-violations]
        // of the next word
                           ^
Libraries/BasicLib/BasicLibString.cpp:88:38: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_of( WHITESPACE, wss );
                                     ^
Libraries/BasicLib/BasicLibString.cpp:88:54: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_of( WHITESPACE, wss );
                                                     ^
Libraries/BasicLib/BasicLibString.cpp:88:57: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_of( WHITESPACE, wss );
                                                        ^
Libraries/BasicLib/BasicLibString.cpp:89:42: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_not_of( WHITESPACE, wss );
                                         ^
Libraries/BasicLib/BasicLibString.cpp:89:58: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_not_of( WHITESPACE, wss );
                                                         ^
Libraries/BasicLib/BasicLibString.cpp:89:61: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_not_of( WHITESPACE, wss );
                                                            ^
Libraries/BasicLib/BasicLibString.cpp:90:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.cpp:92:32: warning: code should be clang-formatted [-Wclang-format-violations]
    // find the end of the word
                               ^
Libraries/BasicLib/BasicLibString.cpp:93:38: warning: code should be clang-formatted [-Wclang-format-violations]
    int wse = p_string.find_first_of( WHITESPACE, wss );
                                     ^
Libraries/BasicLib/BasicLibString.cpp:93:54: warning: code should be clang-formatted [-Wclang-format-violations]
    int wse = p_string.find_first_of( WHITESPACE, wss );
                                                     ^
Libraries/BasicLib/BasicLibString.cpp:93:57: warning: code should be clang-formatted [-Wclang-format-violations]
    int wse = p_string.find_first_of( WHITESPACE, wss );
                                                        ^
Libraries/BasicLib/BasicLibString.cpp:95:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wss == std::string::npos )
      ^
Libraries/BasicLib/BasicLibString.cpp:95:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wss == std::string::npos )
       ^
Libraries/BasicLib/BasicLibString.cpp:95:33: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wss == std::string::npos )
                                ^
Libraries/BasicLib/BasicLibString.cpp:95:35: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wss == std::string::npos )
                                  ^
Libraries/BasicLib/BasicLibString.cpp:96:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.cpp:97:17: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = 0;
                ^
Libraries/BasicLib/BasicLibString.cpp:98:17: warning: code should be clang-formatted [-Wclang-format-violations]
        wse = 0;
                ^
Libraries/BasicLib/BasicLibString.cpp:99:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.cpp:101:28: warning: code should be clang-formatted [-Wclang-format-violations]
    return p_string.substr( wss, wse - wss );
                           ^
Libraries/BasicLib/BasicLibString.cpp:101:43: warning: code should be clang-formatted [-Wclang-format-violations]
    return p_string.substr( wss, wse - wss );
                                          ^
Libraries/BasicLib/BasicLibString.cpp:104:24: warning: code should be clang-formatted [-Wclang-format-violations]
std::string RemoveWord( const std::string& p_string, int p_index )
                       ^
Libraries/BasicLib/BasicLibString.cpp:104:42: warning: code should be clang-formatted [-Wclang-format-violations]
std::string RemoveWord( const std::string& p_string, int p_index )
                                         ^
Libraries/BasicLib/BasicLibString.cpp:104:43: warning: code should be clang-formatted [-Wclang-format-violations]
std::string RemoveWord( const std::string& p_string, int p_index )
                                          ^
Libraries/BasicLib/BasicLibString.cpp:104:65: warning: code should be clang-formatted [-Wclang-format-violations]
std::string RemoveWord( const std::string& p_string, int p_index )
                                                                ^
Libraries/BasicLib/BasicLibString.cpp:104:67: warning: code should be clang-formatted [-Wclang-format-violations]
std::string RemoveWord( const std::string& p_string, int p_index )
                                                                  ^
Libraries/BasicLib/BasicLibString.cpp:105:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibString.cpp:106:42: warning: code should be clang-formatted [-Wclang-format-violations]
    int wss = p_string.find_first_not_of( WHITESPACE );
                                         ^
Libraries/BasicLib/BasicLibString.cpp:106:53: warning: code should be clang-formatted [-Wclang-format-violations]
    int wss = p_string.find_first_not_of( WHITESPACE );
                                                    ^
Libraries/BasicLib/BasicLibString.cpp:106:56: warning: code should be clang-formatted [-Wclang-format-violations]
    int wss = p_string.find_first_not_of( WHITESPACE );
                                                       ^
Libraries/BasicLib/BasicLibString.cpp:108:10: warning: code should be clang-formatted [-Wclang-format-violations]
    while( p_index > 0 )
         ^
Libraries/BasicLib/BasicLibString.cpp:108:11: warning: code should be clang-formatted [-Wclang-format-violations]
    while( p_index > 0 )
          ^
Libraries/BasicLib/BasicLibString.cpp:108:23: warning: code should be clang-formatted [-Wclang-format-violations]
    while( p_index > 0 )
                      ^
Libraries/BasicLib/BasicLibString.cpp:108:25: warning: code should be clang-formatted [-Wclang-format-violations]
    while( p_index > 0 )
                        ^
Libraries/BasicLib/BasicLibString.cpp:109:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.cpp:110:19: warning: code should be clang-formatted [-Wclang-format-violations]
        p_index--;
                  ^
Libraries/BasicLib/BasicLibString.cpp:112:70: warning: code should be clang-formatted [-Wclang-format-violations]
        // find the beginning of the next word, by finding whitespace
                                                                     ^
Libraries/BasicLib/BasicLibString.cpp:113:73: warning: code should be clang-formatted [-Wclang-format-violations]
        // to end the current word, and then non-whitespace at the start
                                                                        ^
Libraries/BasicLib/BasicLibString.cpp:114:28: warning: code should be clang-formatted [-Wclang-format-violations]
        // of the next word
                           ^
Libraries/BasicLib/BasicLibString.cpp:115:38: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_of( WHITESPACE, wss );
                                     ^
Libraries/BasicLib/BasicLibString.cpp:115:54: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_of( WHITESPACE, wss );
                                                     ^
Libraries/BasicLib/BasicLibString.cpp:115:57: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_of( WHITESPACE, wss );
                                                        ^
Libraries/BasicLib/BasicLibString.cpp:116:42: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_not_of( WHITESPACE, wss );
                                         ^
Libraries/BasicLib/BasicLibString.cpp:116:58: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_not_of( WHITESPACE, wss );
                                                         ^
Libraries/BasicLib/BasicLibString.cpp:116:61: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = p_string.find_first_not_of( WHITESPACE, wss );
                                                            ^
Libraries/BasicLib/BasicLibString.cpp:117:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.cpp:119:32: warning: code should be clang-formatted [-Wclang-format-violations]
    // find the end of the word
                               ^
Libraries/BasicLib/BasicLibString.cpp:120:38: warning: code should be clang-formatted [-Wclang-format-violations]
    int wse = p_string.find_first_of( WHITESPACE, wss );
                                     ^
Libraries/BasicLib/BasicLibString.cpp:120:54: warning: code should be clang-formatted [-Wclang-format-violations]
    int wse = p_string.find_first_of( WHITESPACE, wss );
                                                     ^
Libraries/BasicLib/BasicLibString.cpp:120:57: warning: code should be clang-formatted [-Wclang-format-violations]
    int wse = p_string.find_first_of( WHITESPACE, wss );
                                                        ^
Libraries/BasicLib/BasicLibString.cpp:122:43: warning: code should be clang-formatted [-Wclang-format-violations]
    // find the beginning of the next word
                                          ^
Libraries/BasicLib/BasicLibString.cpp:123:38: warning: code should be clang-formatted [-Wclang-format-violations]
    wse = p_string.find_first_not_of( WHITESPACE, wse );
                                     ^
Libraries/BasicLib/BasicLibString.cpp:123:54: warning: code should be clang-formatted [-Wclang-format-violations]
    wse = p_string.find_first_not_of( WHITESPACE, wse );
                                                     ^
Libraries/BasicLib/BasicLibString.cpp:123:57: warning: code should be clang-formatted [-Wclang-format-violations]
    wse = p_string.find_first_not_of( WHITESPACE, wse );
                                                        ^
Libraries/BasicLib/BasicLibString.cpp:125:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wss == std::string::npos )
      ^
Libraries/BasicLib/BasicLibString.cpp:125:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wss == std::string::npos )
       ^
Libraries/BasicLib/BasicLibString.cpp:125:33: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wss == std::string::npos )
                                ^
Libraries/BasicLib/BasicLibString.cpp:125:35: warning: code should be clang-formatted [-Wclang-format-violations]
    if( wss == std::string::npos )
                                  ^
Libraries/BasicLib/BasicLibString.cpp:126:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.cpp:127:17: warning: code should be clang-formatted [-Wclang-format-violations]
        wss = 0;
                ^
Libraries/BasicLib/BasicLibString.cpp:128:17: warning: code should be clang-formatted [-Wclang-format-violations]
        wse = 0;
                ^
Libraries/BasicLib/BasicLibString.cpp:129:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.cpp:131:32: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string str = p_string;
                               ^
Libraries/BasicLib/BasicLibString.cpp:132:15: warning: code should be clang-formatted [-Wclang-format-violations]
    str.erase( wss, wse - wss );
              ^
Libraries/BasicLib/BasicLibString.cpp:132:30: warning: code should be clang-formatted [-Wclang-format-violations]
    str.erase( wss, wse - wss );
                             ^
Libraries/BasicLib/BasicLibString.cpp:132:33: warning: code should be clang-formatted [-Wclang-format-violations]
    str.erase( wss, wse - wss );
                                ^
Libraries/BasicLib/BasicLibString.cpp:134:2: warning: code should be clang-formatted [-Wclang-format-violations]
}
 ^
Libraries/BasicLib/BasicLibTime.cpp:4:78: warning: code should be clang-formatted [-Wclang-format-violations]
// BasicLibTime.cpp - This file contains all time-based classes and functions
                                                                             ^
Libraries/BasicLib/BasicLibTime.cpp:15:13: warning: code should be clang-formatted [-Wclang-format-violations]
#ifdef WIN32
            ^
Libraries/BasicLib/BasicLibTime.cpp:17:6: warning: code should be clang-formatted [-Wclang-format-violations]
#else
     ^
Libraries/BasicLib/BasicLibTime.cpp:19:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
Libraries/BasicLib/BasicLibTime.cpp:24:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibTime.cpp:25:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibTime.cpp:26:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:27:64: warning: code should be clang-formatted [-Wclang-format-violations]
    // This is a hidden class, designed to initialize the win32
                                                               ^
Libraries/BasicLib/BasicLibTime.cpp:28:44: warning: code should be clang-formatted [-Wclang-format-violations]
    // performance counter frequency value.
                                           ^
Libraries/BasicLib/BasicLibTime.cpp:29:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:30:17: warning: code should be clang-formatted [-Wclang-format-violations]
    #ifdef WIN32
                ^
Libraries/BasicLib/BasicLibTime.cpp:31:38: warning: code should be clang-formatted [-Wclang-format-violations]
        class Win32PerformanceCounter
                                     ^
Libraries/BasicLib/BasicLibTime.cpp:32:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibTime.cpp:33:16: warning: code should be clang-formatted [-Wclang-format-violations]
        public:
               ^
Libraries/BasicLib/BasicLibTime.cpp:34:38: warning: code should be clang-formatted [-Wclang-format-violations]
            Win32PerformanceCounter()
                                     ^
Libraries/BasicLib/BasicLibTime.cpp:35:14: warning: code should be clang-formatted [-Wclang-format-violations]
            {
             ^
Libraries/BasicLib/BasicLibTime.cpp:36:52: warning: code should be clang-formatted [-Wclang-format-violations]
                // get the "ticks per second" value
                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:37:43: warning: code should be clang-formatted [-Wclang-format-violations]
                QueryPerformanceFrequency( (LARGE_INTEGER*)(&m_frequency) );
                                          ^
Libraries/BasicLib/BasicLibTime.cpp:37:58: warning: code should be clang-formatted [-Wclang-format-violations]
                QueryPerformanceFrequency( (LARGE_INTEGER*)(&m_frequency) );
                                                         ^
Libraries/BasicLib/BasicLibTime.cpp:37:74: warning: code should be clang-formatted [-Wclang-format-violations]
                QueryPerformanceFrequency( (LARGE_INTEGER*)(&m_frequency) );
                                                                         ^
Libraries/BasicLib/BasicLibTime.cpp:37:77: warning: code should be clang-formatted [-Wclang-format-violations]
                QueryPerformanceFrequency( (LARGE_INTEGER*)(&m_frequency) );
                                                                            ^
Libraries/BasicLib/BasicLibTime.cpp:39:67: warning: code should be clang-formatted [-Wclang-format-violations]
                // convert it into a "ticks per millisecond" value
                                                                  ^
Libraries/BasicLib/BasicLibTime.cpp:40:50: warning: code should be clang-formatted [-Wclang-format-violations]
                m_frequency = m_frequency / 1000;
                                                 ^
Libraries/BasicLib/BasicLibTime.cpp:41:14: warning: code should be clang-formatted [-Wclang-format-violations]
            }
             ^
Libraries/BasicLib/BasicLibTime.cpp:43:68: warning: code should be clang-formatted [-Wclang-format-violations]
            // this is the frequency of the performance counter, in 
                                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:44:39: warning: code should be clang-formatted [-Wclang-format-violations]
            // "ticks per millisecond"
                                      ^
Libraries/BasicLib/BasicLibTime.cpp:45:32: warning: code should be clang-formatted [-Wclang-format-violations]
            sint64 m_frequency;
                               ^
Libraries/BasicLib/BasicLibTime.cpp:46:11: warning: code should be clang-formatted [-Wclang-format-violations]
        };
          ^
Libraries/BasicLib/BasicLibTime.cpp:48:48: warning: code should be clang-formatted [-Wclang-format-violations]
        Win32PerformanceCounter g_win32counter;
                                               ^
Libraries/BasicLib/BasicLibTime.cpp:49:11: warning: code should be clang-formatted [-Wclang-format-violations]
    #endif
          ^
Libraries/BasicLib/BasicLibTime.cpp:53:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:54:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // These functions get a time value. The Actual meaning of this 
                                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:55:59: warning: code should be clang-formatted [-Wclang-format-violations]
    // time is undefined; it is only meant to be relative.
                                                          ^
Libraries/BasicLib/BasicLibTime.cpp:56:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:57:23: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 GetTimeMS()
                      ^
Libraries/BasicLib/BasicLibTime.cpp:58:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:59:21: warning: code should be clang-formatted [-Wclang-format-violations]
        #ifdef WIN32
                    ^
Libraries/BasicLib/BasicLibTime.cpp:60:22: warning: code should be clang-formatted [-Wclang-format-violations]
            sint64 t;
                     ^
Libraries/BasicLib/BasicLibTime.cpp:61:37: warning: code should be clang-formatted [-Wclang-format-violations]
            QueryPerformanceCounter( (LARGE_INTEGER*)(&t) );
                                    ^
Libraries/BasicLib/BasicLibTime.cpp:61:52: warning: code should be clang-formatted [-Wclang-format-violations]
            QueryPerformanceCounter( (LARGE_INTEGER*)(&t) );
                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:61:58: warning: code should be clang-formatted [-Wclang-format-violations]
            QueryPerformanceCounter( (LARGE_INTEGER*)(&t) );
                                                         ^
Libraries/BasicLib/BasicLibTime.cpp:61:61: warning: code should be clang-formatted [-Wclang-format-violations]
            QueryPerformanceCounter( (LARGE_INTEGER*)(&t) );
                                                            ^
Libraries/BasicLib/BasicLibTime.cpp:62:51: warning: code should be clang-formatted [-Wclang-format-violations]
            return t / g_win32counter.m_frequency;
                                                  ^
Libraries/BasicLib/BasicLibTime.cpp:63:14: warning: code should be clang-formatted [-Wclang-format-violations]
        #else
             ^
Libraries/BasicLib/BasicLibTime.cpp:64:30: warning: code should be clang-formatted [-Wclang-format-violations]
            struct timeval t;
                             ^
Libraries/BasicLib/BasicLibTime.cpp:65:22: warning: code should be clang-formatted [-Wclang-format-violations]
            sint64 s;
                     ^
Libraries/BasicLib/BasicLibTime.cpp:67:35: warning: code should be clang-formatted [-Wclang-format-violations]
            // get the time of day
                                  ^
Libraries/BasicLib/BasicLibTime.cpp:68:26: warning: code should be clang-formatted [-Wclang-format-violations]
            gettimeofday( &t, 0 );
                         ^
Libraries/BasicLib/BasicLibTime.cpp:68:32: warning: code should be clang-formatted [-Wclang-format-violations]
            gettimeofday( &t, 0 );
                               ^
Libraries/BasicLib/BasicLibTime.cpp:68:35: warning: code should be clang-formatted [-Wclang-format-violations]
            gettimeofday( &t, 0 );
                                  ^
Libraries/BasicLib/BasicLibTime.cpp:70:79: warning: code should be clang-formatted [-Wclang-format-violations]
            // calculate the number of milliseconds represented by the seconds
                                                                              ^
Libraries/BasicLib/BasicLibTime.cpp:71:26: warning: code should be clang-formatted [-Wclang-format-violations]
            s = t.tv_sec;
                         ^
Libraries/BasicLib/BasicLibTime.cpp:72:23: warning: code should be clang-formatted [-Wclang-format-violations]
            s *= 1000;
                      ^
Libraries/BasicLib/BasicLibTime.cpp:74:46: warning: code should be clang-formatted [-Wclang-format-violations]
            // calculate the milliseconds now
                                             ^
Libraries/BasicLib/BasicLibTime.cpp:75:37: warning: code should be clang-formatted [-Wclang-format-violations]
            s += (t.tv_usec / 1000);
                                    ^
Libraries/BasicLib/BasicLibTime.cpp:77:32: warning: code should be clang-formatted [-Wclang-format-violations]
            // return the value
                               ^
Libraries/BasicLib/BasicLibTime.cpp:78:22: warning: code should be clang-formatted [-Wclang-format-violations]
            return s;
                     ^
Libraries/BasicLib/BasicLibTime.cpp:79:15: warning: code should be clang-formatted [-Wclang-format-violations]
        #endif
              ^
Libraries/BasicLib/BasicLibTime.cpp:80:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:83:22: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 GetTimeS()
                     ^
Libraries/BasicLib/BasicLibTime.cpp:84:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:85:35: warning: code should be clang-formatted [-Wclang-format-violations]
        return GetTimeMS() / 1000;
                                  ^
Libraries/BasicLib/BasicLibTime.cpp:86:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:88:22: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 GetTimeM()
                     ^
Libraries/BasicLib/BasicLibTime.cpp:89:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:90:36: warning: code should be clang-formatted [-Wclang-format-violations]
        return GetTimeMS() / 60000;
                                   ^
Libraries/BasicLib/BasicLibTime.cpp:91:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:93:22: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 GetTimeH()
                     ^
Libraries/BasicLib/BasicLibTime.cpp:94:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:95:38: warning: code should be clang-formatted [-Wclang-format-violations]
        return GetTimeMS() / 3600000;
                                     ^
Libraries/BasicLib/BasicLibTime.cpp:96:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:99:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:100:59: warning: code should be clang-formatted [-Wclang-format-violations]
    // This prints a timestamp in 24 hours hh:mm:ss format
                                                          ^
Libraries/BasicLib/BasicLibTime.cpp:101:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:102:28: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string TimeStamp()
                           ^
Libraries/BasicLib/BasicLibTime.cpp:103:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:104:21: warning: code should be clang-formatted [-Wclang-format-violations]
        char str[9];
                    ^
Libraries/BasicLib/BasicLibTime.cpp:106:60: warning: code should be clang-formatted [-Wclang-format-violations]
        // get the time, and convert it to struct tm format
                                                           ^
Libraries/BasicLib/BasicLibTime.cpp:107:28: warning: code should be clang-formatted [-Wclang-format-violations]
        time_t a = time(0);
                           ^
Libraries/BasicLib/BasicLibTime.cpp:108:18: warning: code should be clang-formatted [-Wclang-format-violations]
        struct tm* b = localtime( &a );
                 ^
Libraries/BasicLib/BasicLibTime.cpp:108:19: warning: code should be clang-formatted [-Wclang-format-violations]
        struct tm* b = localtime( &a );
                  ^
Libraries/BasicLib/BasicLibTime.cpp:108:34: warning: code should be clang-formatted [-Wclang-format-violations]
        struct tm* b = localtime( &a );
                                 ^
Libraries/BasicLib/BasicLibTime.cpp:108:37: warning: code should be clang-formatted [-Wclang-format-violations]
        struct tm* b = localtime( &a );
                                    ^
Libraries/BasicLib/BasicLibTime.cpp:108:40: warning: code should be clang-formatted [-Wclang-format-violations]
        struct tm* b = localtime( &a );
                                       ^
Libraries/BasicLib/BasicLibTime.cpp:110:40: warning: code should be clang-formatted [-Wclang-format-violations]
        // print the time to the string
                                       ^
Libraries/BasicLib/BasicLibTime.cpp:111:18: warning: code should be clang-formatted [-Wclang-format-violations]
        strftime( str, 9, "%H:%M:%S", b );
                 ^
Libraries/BasicLib/BasicLibTime.cpp:111:40: warning: code should be clang-formatted [-Wclang-format-violations]
        strftime( str, 9, "%H:%M:%S", b );
                                       ^
Libraries/BasicLib/BasicLibTime.cpp:111:43: warning: code should be clang-formatted [-Wclang-format-violations]
        strftime( str, 9, "%H:%M:%S", b );
                                          ^
Libraries/BasicLib/BasicLibTime.cpp:113:20: warning: code should be clang-formatted [-Wclang-format-violations]
        return str;
                   ^
Libraries/BasicLib/BasicLibTime.cpp:114:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:117:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:118:52: warning: code should be clang-formatted [-Wclang-format-violations]
    // This prints a datestamp in YYYY:MM:DD format
                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:119:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.cpp:120:28: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string DateStamp()
                           ^
Libraries/BasicLib/BasicLibTime.cpp:121:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:122:22: warning: code should be clang-formatted [-Wclang-format-violations]
        char str[11];
                     ^
Libraries/BasicLib/BasicLibTime.cpp:124:60: warning: code should be clang-formatted [-Wclang-format-violations]
        // get the time, and convert it to struct tm format
                                                           ^
Libraries/BasicLib/BasicLibTime.cpp:125:28: warning: code should be clang-formatted [-Wclang-format-violations]
        time_t a = time(0);
                           ^
Libraries/BasicLib/BasicLibTime.cpp:126:18: warning: code should be clang-formatted [-Wclang-format-violations]
        struct tm* b = localtime( &a );
                 ^
Libraries/BasicLib/BasicLibTime.cpp:126:19: warning: code should be clang-formatted [-Wclang-format-violations]
        struct tm* b = localtime( &a );
                  ^
Libraries/BasicLib/BasicLibTime.cpp:126:34: warning: code should be clang-formatted [-Wclang-format-violations]
        struct tm* b = localtime( &a );
                                 ^
Libraries/BasicLib/BasicLibTime.cpp:126:37: warning: code should be clang-formatted [-Wclang-format-violations]
        struct tm* b = localtime( &a );
                                    ^
Libraries/BasicLib/BasicLibTime.cpp:126:40: warning: code should be clang-formatted [-Wclang-format-violations]
        struct tm* b = localtime( &a );
                                       ^
Libraries/BasicLib/BasicLibTime.cpp:128:40: warning: code should be clang-formatted [-Wclang-format-violations]
        // print the time to the string
                                       ^
Libraries/BasicLib/BasicLibTime.cpp:129:18: warning: code should be clang-formatted [-Wclang-format-violations]
        strftime( str, 11, "%Y.%m.%d", b );
                 ^
Libraries/BasicLib/BasicLibTime.cpp:129:41: warning: code should be clang-formatted [-Wclang-format-violations]
        strftime( str, 11, "%Y.%m.%d", b );
                                        ^
Libraries/BasicLib/BasicLibTime.cpp:129:44: warning: code should be clang-formatted [-Wclang-format-violations]
        strftime( str, 11, "%Y.%m.%d", b );
                                           ^
Libraries/BasicLib/BasicLibTime.cpp:131:20: warning: code should be clang-formatted [-Wclang-format-violations]
        return str;
                   ^
Libraries/BasicLib/BasicLibTime.cpp:132:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:135:19: warning: code should be clang-formatted [-Wclang-format-violations]
    Timer::Timer()
                  ^
Libraries/BasicLib/BasicLibTime.cpp:136:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:137:25: warning: code should be clang-formatted [-Wclang-format-violations]
        m_starttime = 0;
                        ^
Libraries/BasicLib/BasicLibTime.cpp:138:24: warning: code should be clang-formatted [-Wclang-format-violations]
        m_inittime = 0;
                       ^
Libraries/BasicLib/BasicLibTime.cpp:139:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:142:23: warning: code should be clang-formatted [-Wclang-format-violations]
    void Timer::Reset( sint64 p_timepassed )
                      ^
Libraries/BasicLib/BasicLibTime.cpp:142:43: warning: code should be clang-formatted [-Wclang-format-violations]
    void Timer::Reset( sint64 p_timepassed )
                                          ^
Libraries/BasicLib/BasicLibTime.cpp:142:45: warning: code should be clang-formatted [-Wclang-format-violations]
    void Timer::Reset( sint64 p_timepassed )
                                            ^
Libraries/BasicLib/BasicLibTime.cpp:143:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:144:36: warning: code should be clang-formatted [-Wclang-format-violations]
        m_starttime = p_timepassed;
                                   ^
Libraries/BasicLib/BasicLibTime.cpp:145:34: warning: code should be clang-formatted [-Wclang-format-violations]
        m_inittime = GetTimeMS();
                                 ^
Libraries/BasicLib/BasicLibTime.cpp:146:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:148:26: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 Timer::GetMS()
                         ^
Libraries/BasicLib/BasicLibTime.cpp:149:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:150:70: warning: code should be clang-formatted [-Wclang-format-violations]
        // return the amount of time that has elapsed since the timer
                                                                     ^
Libraries/BasicLib/BasicLibTime.cpp:151:77: warning: code should be clang-formatted [-Wclang-format-violations]
        // was initialized, plus whatever starting time the timer was given.
                                                                            ^
Libraries/BasicLib/BasicLibTime.cpp:152:57: warning: code should be clang-formatted [-Wclang-format-violations]
        return (GetTimeMS() - m_inittime) + m_starttime;
                                                        ^
Libraries/BasicLib/BasicLibTime.cpp:153:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:155:25: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 Timer::GetS()
                        ^
Libraries/BasicLib/BasicLibTime.cpp:156:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:157:31: warning: code should be clang-formatted [-Wclang-format-violations]
        return GetMS() / 1000;
                              ^
Libraries/BasicLib/BasicLibTime.cpp:158:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:160:25: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 Timer::GetM()
                        ^
Libraries/BasicLib/BasicLibTime.cpp:161:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:162:32: warning: code should be clang-formatted [-Wclang-format-violations]
        return GetMS() / 60000;
                               ^
Libraries/BasicLib/BasicLibTime.cpp:163:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:165:25: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 Timer::GetH()
                        ^
Libraries/BasicLib/BasicLibTime.cpp:166:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:167:34: warning: code should be clang-formatted [-Wclang-format-violations]
        return GetMS() / 3600000;
                                 ^
Libraries/BasicLib/BasicLibTime.cpp:168:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:170:25: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 Timer::GetD()
                        ^
Libraries/BasicLib/BasicLibTime.cpp:171:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:172:35: warning: code should be clang-formatted [-Wclang-format-violations]
        return GetMS() / 86400000;
                                  ^
Libraries/BasicLib/BasicLibTime.cpp:173:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:175:25: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 Timer::GetY()
                        ^
Libraries/BasicLib/BasicLibTime.cpp:176:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:177:29: warning: code should be clang-formatted [-Wclang-format-violations]
        return GetD() / 365;
                            ^
Libraries/BasicLib/BasicLibTime.cpp:178:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibTime.cpp:180:35: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string Timer::GetString()
                                  ^
Libraries/BasicLib/BasicLibTime.cpp:181:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.cpp:182:25: warning: code should be clang-formatted [-Wclang-format-violations]
        std::string str;
                        ^
Libraries/BasicLib/BasicLibTime.cpp:183:27: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 y = GetY();
                          ^
Libraries/BasicLib/BasicLibTime.cpp:184:33: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 d = GetD() % 365;
                                ^
Libraries/BasicLib/BasicLibTime.cpp:185:32: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 h = GetH() % 24;
                               ^
Libraries/BasicLib/BasicLibTime.cpp:186:32: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 m = GetM() % 60;
                               ^
Libraries/BasicLib/BasicLibTime.cpp:188:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( y > 0 )
          ^
Libraries/BasicLib/BasicLibTime.cpp:188:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( y > 0 )
           ^
Libraries/BasicLib/BasicLibTime.cpp:188:18: warning: code should be clang-formatted [-Wclang-format-violations]
        if( y > 0 )
                 ^
Libraries/BasicLib/BasicLibTime.cpp:188:20: warning: code should be clang-formatted [-Wclang-format-violations]
        if( y > 0 )
                   ^
Libraries/BasicLib/BasicLibTime.cpp:189:39: warning: code should be clang-formatted [-Wclang-format-violations]
            str += BasicLib::tostring( y ) + " years, ";
                                      ^
Libraries/BasicLib/BasicLibTime.cpp:189:41: warning: code should be clang-formatted [-Wclang-format-violations]
            str += BasicLib::tostring( y ) + " years, ";
                                        ^
Libraries/BasicLib/BasicLibTime.cpp:189:57: warning: code should be clang-formatted [-Wclang-format-violations]
            str += BasicLib::tostring( y ) + " years, ";
                                                        ^
Libraries/BasicLib/BasicLibTime.cpp:190:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( d > 0 )
          ^
Libraries/BasicLib/BasicLibTime.cpp:190:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( d > 0 )
           ^
Libraries/BasicLib/BasicLibTime.cpp:190:18: warning: code should be clang-formatted [-Wclang-format-violations]
        if( d > 0 )
                 ^
Libraries/BasicLib/BasicLibTime.cpp:190:20: warning: code should be clang-formatted [-Wclang-format-violations]
        if( d > 0 )
                   ^
Libraries/BasicLib/BasicLibTime.cpp:191:39: warning: code should be clang-formatted [-Wclang-format-violations]
            str += BasicLib::tostring( d ) + " days, ";
                                      ^
Libraries/BasicLib/BasicLibTime.cpp:191:41: warning: code should be clang-formatted [-Wclang-format-violations]
            str += BasicLib::tostring( d ) + " days, ";
                                        ^
Libraries/BasicLib/BasicLibTime.cpp:191:56: warning: code should be clang-formatted [-Wclang-format-violations]
            str += BasicLib::tostring( d ) + " days, ";
                                                       ^
Libraries/BasicLib/BasicLibTime.cpp:192:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( h > 0 )
          ^
Libraries/BasicLib/BasicLibTime.cpp:192:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( h > 0 )
           ^
Libraries/BasicLib/BasicLibTime.cpp:192:18: warning: code should be clang-formatted [-Wclang-format-violations]
        if( h > 0 )
                 ^
Libraries/BasicLib/BasicLibTime.cpp:192:20: warning: code should be clang-formatted [-Wclang-format-violations]
        if( h > 0 )
                   ^
Libraries/BasicLib/BasicLibTime.cpp:193:39: warning: code should be clang-formatted [-Wclang-format-violations]
            str += BasicLib::tostring( h ) + " hours, ";
                                      ^
Libraries/BasicLib/BasicLibTime.cpp:193:41: warning: code should be clang-formatted [-Wclang-format-violations]
            str += BasicLib::tostring( h ) + " hours, ";
                                        ^
Libraries/BasicLib/BasicLibTime.cpp:193:57: warning: code should be clang-formatted [-Wclang-format-violations]
            str += BasicLib::tostring( h ) + " hours, ";
                                                        ^
Libraries/BasicLib/BasicLibTime.cpp:195:35: warning: code should be clang-formatted [-Wclang-format-violations]
        str += BasicLib::tostring( m ) + " minutes";
                                  ^
Libraries/BasicLib/BasicLibTime.cpp:195:37: warning: code should be clang-formatted [-Wclang-format-violations]
        str += BasicLib::tostring( m ) + " minutes";
                                    ^
Libraries/BasicLib/BasicLibTime.cpp:195:53: warning: code should be clang-formatted [-Wclang-format-violations]
        str += BasicLib::tostring( m ) + " minutes";
                                                    ^
Libraries/BasicLib/BasicLibTime.cpp:197:20: warning: code should be clang-formatted [-Wclang-format-violations]
        return str;
                   ^
Libraries/BasicLib/BasicLibTime.cpp:198:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLib.h:4:50: warning: code should be clang-formatted [-Wclang-format-violations]
// BasicLib.h - Main header for the basic library
                                                 ^
Libraries/BasicLib/BasicLib.h:8:19: warning: code should be clang-formatted [-Wclang-format-violations]
#define BASICLIB_H
                  ^
Libraries/BasicLib/BasicLib.h:19:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
Libraries/BasicLib/BasicLibFiles.h:4:55: warning: code should be clang-formatted [-Wclang-format-violations]
// BasicLibFiles.h - This file contains file functions
                                                      ^
Libraries/BasicLib/BasicLibFiles.h:10:1: warning: code should be clang-formatted [-Wclang-format-violations]
#include "BasicLibTypes.h"
^
Libraries/BasicLib/BasicLibFiles.h:14:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibFiles.h:15:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibFiles.h:17:44: warning: code should be clang-formatted [-Wclang-format-violations]
    typedef std::set<std::string> filelist;
                                           ^
Libraries/BasicLib/BasicLibFiles.h:18:26: warning: code should be clang-formatted [-Wclang-format-violations]
    filelist GetFileList( const std::string p_directory );
                         ^
Libraries/BasicLib/BasicLibFiles.h:18:56: warning: code should be clang-formatted [-Wclang-format-violations]
    filelist GetFileList( const std::string p_directory );
                                                       ^
Libraries/BasicLib/BasicLibFiles.h:18:59: warning: code should be clang-formatted [-Wclang-format-violations]
    filelist GetFileList( const std::string p_directory );
                                                          ^
Libraries/BasicLib/BasicLibFiles.h:21:28: warning: code should be clang-formatted [-Wclang-format-violations]
} // end namespace BasicLib
                           ^
Libraries/BasicLib/BasicLibFiles.h:24:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
Libraries/BasicLib/BasicLibFunctions.h:4:62: warning: code should be clang-formatted [-Wclang-format-violations]
// BasicLibFunctions.h - This file contains generic functions
                                                             ^
Libraries/BasicLib/BasicLibFunctions.h:12:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibFunctions.h:18:9: warning: code should be clang-formatted [-Wclang-format-violations]
template<class iterator, class firstpass, class secondpass> 
        ^
Libraries/BasicLib/BasicLibFunctions.h:18:60: warning: code should be clang-formatted [-Wclang-format-violations]
template<class iterator, class firstpass, class secondpass> 
                                                           ^
Libraries/BasicLib/BasicLibFunctions.h:19:32: warning: code should be clang-formatted [-Wclang-format-violations]
inline iterator double_find_if( iterator begin, 
                               ^
Libraries/BasicLib/BasicLibFunctions.h:19:48: warning: code should be clang-formatted [-Wclang-format-violations]
inline iterator double_find_if( iterator begin, 
                                               ^
Libraries/BasicLib/BasicLibFunctions.h:20:46: warning: code should be clang-formatted [-Wclang-format-violations]
                                iterator end, 
                                             ^
Libraries/BasicLib/BasicLibFunctions.h:21:47: warning: code should be clang-formatted [-Wclang-format-violations]
                                firstpass one,
                                              ^
Libraries/BasicLib/BasicLibFunctions.h:22:47: warning: code should be clang-formatted [-Wclang-format-violations]
                                secondpass two )
                                              ^
Libraries/BasicLib/BasicLibFunctions.h:22:49: warning: code should be clang-formatted [-Wclang-format-violations]
                                secondpass two )
                                                ^
Libraries/BasicLib/BasicLibFunctions.h:23:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibFunctions.h:24:33: warning: code should be clang-formatted [-Wclang-format-violations]
    iterator itr = std::find_if( begin, end, one );
                                ^
Libraries/BasicLib/BasicLibFunctions.h:24:49: warning: code should be clang-formatted [-Wclang-format-violations]
    iterator itr = std::find_if( begin, end, one );
                                                ^
Libraries/BasicLib/BasicLibFunctions.h:24:52: warning: code should be clang-formatted [-Wclang-format-violations]
    iterator itr = std::find_if( begin, end, one );
                                                   ^
Libraries/BasicLib/BasicLibFunctions.h:25:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( itr != end )
      ^
Libraries/BasicLib/BasicLibFunctions.h:25:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( itr != end )
       ^
Libraries/BasicLib/BasicLibFunctions.h:25:19: warning: code should be clang-formatted [-Wclang-format-violations]
    if( itr != end )
                  ^
Libraries/BasicLib/BasicLibFunctions.h:25:21: warning: code should be clang-formatted [-Wclang-format-violations]
    if( itr != end )
                    ^
Libraries/BasicLib/BasicLibFunctions.h:26:20: warning: code should be clang-formatted [-Wclang-format-violations]
        return itr;
                   ^
Libraries/BasicLib/BasicLibFunctions.h:28:25: warning: code should be clang-formatted [-Wclang-format-violations]
    return std::find_if( begin, end, two );
                        ^
Libraries/BasicLib/BasicLibFunctions.h:28:41: warning: code should be clang-formatted [-Wclang-format-violations]
    return std::find_if( begin, end, two );
                                        ^
Libraries/BasicLib/BasicLibFunctions.h:35:9: warning: code should be clang-formatted [-Wclang-format-violations]
template<class iterator, class firstpass, class secondpass, class qualify> 
        ^
Libraries/BasicLib/BasicLibFunctions.h:35:75: warning: code should be clang-formatted [-Wclang-format-violations]
template<class iterator, class firstpass, class secondpass, class qualify> 
                                                                          ^
Libraries/BasicLib/BasicLibFunctions.h:36:32: warning: code should be clang-formatted [-Wclang-format-violations]
inline iterator double_find_if( iterator begin, 
                               ^
Libraries/BasicLib/BasicLibFunctions.h:36:48: warning: code should be clang-formatted [-Wclang-format-violations]
inline iterator double_find_if( iterator begin, 
                                               ^
Libraries/BasicLib/BasicLibFunctions.h:37:46: warning: code should be clang-formatted [-Wclang-format-violations]
                                iterator end, 
                                             ^
Libraries/BasicLib/BasicLibFunctions.h:38:47: warning: code should be clang-formatted [-Wclang-format-violations]
                                firstpass one,
                                              ^
Libraries/BasicLib/BasicLibFunctions.h:39:48: warning: code should be clang-formatted [-Wclang-format-violations]
                                secondpass two,
                                               ^
Libraries/BasicLib/BasicLibFunctions.h:40:42: warning: code should be clang-formatted [-Wclang-format-violations]
                                qualify q )
                                         ^
Libraries/BasicLib/BasicLibFunctions.h:40:44: warning: code should be clang-formatted [-Wclang-format-violations]
                                qualify q )
                                           ^
Libraries/BasicLib/BasicLibFunctions.h:41:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibFunctions.h:42:26: warning: code should be clang-formatted [-Wclang-format-violations]
    iterator itr = begin;
                         ^
Libraries/BasicLib/BasicLibFunctions.h:43:10: warning: code should be clang-formatted [-Wclang-format-violations]
    while( itr != end )
         ^
Libraries/BasicLib/BasicLibFunctions.h:43:11: warning: code should be clang-formatted [-Wclang-format-violations]
    while( itr != end )
          ^
Libraries/BasicLib/BasicLibFunctions.h:43:22: warning: code should be clang-formatted [-Wclang-format-violations]
    while( itr != end )
                     ^
Libraries/BasicLib/BasicLibFunctions.h:43:24: warning: code should be clang-formatted [-Wclang-format-violations]
    while( itr != end )
                       ^
Libraries/BasicLib/BasicLibFunctions.h:44:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibFunctions.h:45:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && one( *itr ) )
          ^
Libraries/BasicLib/BasicLibFunctions.h:45:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && one( *itr ) )
           ^
Libraries/BasicLib/BasicLibFunctions.h:45:15: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && one( *itr ) )
              ^
Libraries/BasicLib/BasicLibFunctions.h:45:20: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && one( *itr ) )
                   ^
Libraries/BasicLib/BasicLibFunctions.h:45:30: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && one( *itr ) )
                             ^
Libraries/BasicLib/BasicLibFunctions.h:45:35: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && one( *itr ) )
                                  ^
Libraries/BasicLib/BasicLibFunctions.h:45:37: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && one( *itr ) )
                                    ^
Libraries/BasicLib/BasicLibFunctions.h:45:39: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && one( *itr ) )
                                      ^
Libraries/BasicLib/BasicLibFunctions.h:46:24: warning: code should be clang-formatted [-Wclang-format-violations]
            return itr;
                       ^
Libraries/BasicLib/BasicLibFunctions.h:47:15: warning: code should be clang-formatted [-Wclang-format-violations]
        ++itr;
              ^
Libraries/BasicLib/BasicLibFunctions.h:48:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibFunctions.h:50:17: warning: code should be clang-formatted [-Wclang-format-violations]
    itr = begin;
                ^
Libraries/BasicLib/BasicLibFunctions.h:51:10: warning: code should be clang-formatted [-Wclang-format-violations]
    while( itr != end )
         ^
Libraries/BasicLib/BasicLibFunctions.h:51:11: warning: code should be clang-formatted [-Wclang-format-violations]
    while( itr != end )
          ^
Libraries/BasicLib/BasicLibFunctions.h:51:22: warning: code should be clang-formatted [-Wclang-format-violations]
    while( itr != end )
                     ^
Libraries/BasicLib/BasicLibFunctions.h:51:24: warning: code should be clang-formatted [-Wclang-format-violations]
    while( itr != end )
                       ^
Libraries/BasicLib/BasicLibFunctions.h:52:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibFunctions.h:53:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && two( *itr ) )
          ^
Libraries/BasicLib/BasicLibFunctions.h:53:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && two( *itr ) )
           ^
Libraries/BasicLib/BasicLibFunctions.h:53:15: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && two( *itr ) )
              ^
Libraries/BasicLib/BasicLibFunctions.h:53:20: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && two( *itr ) )
                   ^
Libraries/BasicLib/BasicLibFunctions.h:53:30: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && two( *itr ) )
                             ^
Libraries/BasicLib/BasicLibFunctions.h:53:35: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && two( *itr ) )
                                  ^
Libraries/BasicLib/BasicLibFunctions.h:53:37: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && two( *itr ) )
                                    ^
Libraries/BasicLib/BasicLibFunctions.h:53:39: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *itr ) && two( *itr ) )
                                      ^
Libraries/BasicLib/BasicLibFunctions.h:54:24: warning: code should be clang-formatted [-Wclang-format-violations]
            return itr;
                       ^
Libraries/BasicLib/BasicLibFunctions.h:55:15: warning: code should be clang-formatted [-Wclang-format-violations]
        ++itr;
              ^
Libraries/BasicLib/BasicLibFunctions.h:56:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibFunctions.h:59:2: warning: code should be clang-formatted [-Wclang-format-violations]
}
 ^
Libraries/BasicLib/BasicLibFunctions.h:66:9: warning: code should be clang-formatted [-Wclang-format-violations]
template<class iterator, class function, class qualify>
        ^
Libraries/BasicLib/BasicLibFunctions.h:67:31: warning: code should be clang-formatted [-Wclang-format-violations]
inline function operate_on_if( iterator begin, 
                              ^
Libraries/BasicLib/BasicLibFunctions.h:67:47: warning: code should be clang-formatted [-Wclang-format-violations]
inline function operate_on_if( iterator begin, 
                                              ^
Libraries/BasicLib/BasicLibFunctions.h:68:41: warning: code should be clang-formatted [-Wclang-format-violations]
                           iterator end, 
                                        ^
Libraries/BasicLib/BasicLibFunctions.h:69:42: warning: code should be clang-formatted [-Wclang-format-violations]
                           function func,
                                         ^
Libraries/BasicLib/BasicLibFunctions.h:70:37: warning: code should be clang-formatted [-Wclang-format-violations]
                           qualify q )
                                    ^
Libraries/BasicLib/BasicLibFunctions.h:70:39: warning: code should be clang-formatted [-Wclang-format-violations]
                           qualify q )
                                      ^
Libraries/BasicLib/BasicLibFunctions.h:71:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibFunctions.h:72:10: warning: code should be clang-formatted [-Wclang-format-violations]
    while( begin != end )
         ^
Libraries/BasicLib/BasicLibFunctions.h:72:11: warning: code should be clang-formatted [-Wclang-format-violations]
    while( begin != end )
          ^
Libraries/BasicLib/BasicLibFunctions.h:72:24: warning: code should be clang-formatted [-Wclang-format-violations]
    while( begin != end )
                       ^
Libraries/BasicLib/BasicLibFunctions.h:72:26: warning: code should be clang-formatted [-Wclang-format-violations]
    while( begin != end )
                         ^
Libraries/BasicLib/BasicLibFunctions.h:73:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibFunctions.h:74:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *begin ) )
          ^
Libraries/BasicLib/BasicLibFunctions.h:74:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *begin ) )
           ^
Libraries/BasicLib/BasicLibFunctions.h:74:15: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *begin ) )
              ^
Libraries/BasicLib/BasicLibFunctions.h:74:22: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *begin ) )
                     ^
Libraries/BasicLib/BasicLibFunctions.h:74:24: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *begin ) )
                       ^
Libraries/BasicLib/BasicLibFunctions.h:74:26: warning: code should be clang-formatted [-Wclang-format-violations]
        if( q( *begin ) )
                         ^
Libraries/BasicLib/BasicLibFunctions.h:75:18: warning: code should be clang-formatted [-Wclang-format-violations]
            func( *begin );
                 ^
Libraries/BasicLib/BasicLibFunctions.h:75:25: warning: code should be clang-formatted [-Wclang-format-violations]
            func( *begin );
                        ^
Libraries/BasicLib/BasicLibFunctions.h:75:28: warning: code should be clang-formatted [-Wclang-format-violations]
            func( *begin );
                           ^
Libraries/BasicLib/BasicLibFunctions.h:76:17: warning: code should be clang-formatted [-Wclang-format-violations]
        ++begin;
                ^
Libraries/BasicLib/BasicLibFunctions.h:77:3: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibFunctions.h:80:2: warning: code should be clang-formatted [-Wclang-format-violations]
}
 ^
Libraries/BasicLib/BasicLibFunctions.h:83:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< class datatype >
        ^
Libraries/BasicLib/BasicLibFunctions.h:83:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< class datatype >
         ^
Libraries/BasicLib/BasicLibFunctions.h:83:25: warning: code should be clang-formatted [-Wclang-format-violations]
template< class datatype >
                        ^
Libraries/BasicLib/BasicLibFunctions.h:83:27: warning: code should be clang-formatted [-Wclang-format-violations]
template< class datatype >
                          ^
Libraries/BasicLib/BasicLibFunctions.h:84:14: warning: code should be clang-formatted [-Wclang-format-violations]
struct always
             ^
Libraries/BasicLib/BasicLibFunctions.h:85:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibFunctions.h:86:20: warning: code should be clang-formatted [-Wclang-format-violations]
    bool operator() ( datatype& p )     { return true; }
                   ^
Libraries/BasicLib/BasicLibFunctions.h:86:22: warning: code should be clang-formatted [-Wclang-format-violations]
    bool operator() ( datatype& p )     { return true; }
                     ^
Libraries/BasicLib/BasicLibFunctions.h:86:31: warning: code should be clang-formatted [-Wclang-format-violations]
    bool operator() ( datatype& p )     { return true; }
                              ^
Libraries/BasicLib/BasicLibFunctions.h:86:32: warning: code should be clang-formatted [-Wclang-format-violations]
    bool operator() ( datatype& p )     { return true; }
                               ^
Libraries/BasicLib/BasicLibFunctions.h:86:34: warning: code should be clang-formatted [-Wclang-format-violations]
    bool operator() ( datatype& p )     { return true; }
                                 ^
Libraries/BasicLib/BasicLibFunctions.h:86:36: warning: code should be clang-formatted [-Wclang-format-violations]
    bool operator() ( datatype& p )     { return true; }
                                   ^
Libraries/BasicLib/BasicLibFunctions.h:87:3: warning: code should be clang-formatted [-Wclang-format-violations]
};
  ^
Libraries/BasicLib/BasicLibFunctions.h:91:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
        ^
Libraries/BasicLib/BasicLibFunctions.h:91:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
         ^
Libraries/BasicLib/BasicLibFunctions.h:91:24: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
                       ^
Libraries/BasicLib/BasicLibFunctions.h:92:20: warning: code should be clang-formatted [-Wclang-format-violations]
inline int percent( const type& first, const type& second ) 
                   ^
Libraries/BasicLib/BasicLibFunctions.h:92:31: warning: code should be clang-formatted [-Wclang-format-violations]
inline int percent( const type& first, const type& second ) 
                              ^
Libraries/BasicLib/BasicLibFunctions.h:92:32: warning: code should be clang-formatted [-Wclang-format-violations]
inline int percent( const type& first, const type& second ) 
                               ^
Libraries/BasicLib/BasicLibFunctions.h:92:50: warning: code should be clang-formatted [-Wclang-format-violations]
inline int percent( const type& first, const type& second ) 
                                                 ^
Libraries/BasicLib/BasicLibFunctions.h:92:51: warning: code should be clang-formatted [-Wclang-format-violations]
inline int percent( const type& first, const type& second ) 
                                                  ^
Libraries/BasicLib/BasicLibFunctions.h:92:58: warning: code should be clang-formatted [-Wclang-format-violations]
inline int percent( const type& first, const type& second ) 
                                                         ^
Libraries/BasicLib/BasicLibFunctions.h:92:60: warning: code should be clang-formatted [-Wclang-format-violations]
inline int percent( const type& first, const type& second ) 
                                                           ^
Libraries/BasicLib/BasicLibFunctions.h:93:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibFunctions.h:95:2: warning: code should be clang-formatted [-Wclang-format-violations]
}
 ^
Libraries/BasicLib/BasicLibFunctions.h:98:24: warning: code should be clang-formatted [-Wclang-format-violations]
inline char ASCIIToHex( char c )
                       ^
Libraries/BasicLib/BasicLibFunctions.h:98:31: warning: code should be clang-formatted [-Wclang-format-violations]
inline char ASCIIToHex( char c )
                              ^
Libraries/BasicLib/BasicLibFunctions.h:98:33: warning: code should be clang-formatted [-Wclang-format-violations]
inline char ASCIIToHex( char c )
                                ^
Libraries/BasicLib/BasicLibFunctions.h:99:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibFunctions.h:100:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= '0' && c <= '9' )
      ^
Libraries/BasicLib/BasicLibFunctions.h:100:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= '0' && c <= '9' )
       ^
Libraries/BasicLib/BasicLibFunctions.h:100:29: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= '0' && c <= '9' )
                            ^
Libraries/BasicLib/BasicLibFunctions.h:100:31: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= '0' && c <= '9' )
                              ^
Libraries/BasicLib/BasicLibFunctions.h:101:24: warning: code should be clang-formatted [-Wclang-format-violations]
        return c - '0';
                       ^
Libraries/BasicLib/BasicLibFunctions.h:102:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= 'A' && c <= 'F' )
      ^
Libraries/BasicLib/BasicLibFunctions.h:102:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= 'A' && c <= 'F' )
       ^
Libraries/BasicLib/BasicLibFunctions.h:102:29: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= 'A' && c <= 'F' )
                            ^
Libraries/BasicLib/BasicLibFunctions.h:102:31: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= 'A' && c <= 'F' )
                              ^
Libraries/BasicLib/BasicLibFunctions.h:103:29: warning: code should be clang-formatted [-Wclang-format-violations]
        return c - 'A' + 10;
                            ^
Libraries/BasicLib/BasicLibFunctions.h:104:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= 'a' && c <= 'a' )
      ^
Libraries/BasicLib/BasicLibFunctions.h:104:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= 'a' && c <= 'a' )
       ^
Libraries/BasicLib/BasicLibFunctions.h:104:29: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= 'a' && c <= 'a' )
                            ^
Libraries/BasicLib/BasicLibFunctions.h:104:31: warning: code should be clang-formatted [-Wclang-format-violations]
    if( c >= 'a' && c <= 'a' )
                              ^
Libraries/BasicLib/BasicLibFunctions.h:105:29: warning: code should be clang-formatted [-Wclang-format-violations]
        return c - 'a' + 10;
                            ^
Libraries/BasicLib/BasicLibFunctions.h:109:28: warning: code should be clang-formatted [-Wclang-format-violations]
} // end namespace BasicLib
                           ^
Libraries/BasicLib/BasicLibFunctions.h:112:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
Libraries/BasicLib/BasicLibLogger.h:5:14: warning: code should be clang-formatted [-Wclang-format-violations]
// to a file.
             ^
Libraries/BasicLib/BasicLibLogger.h:14:1: warning: code should be clang-formatted [-Wclang-format-violations]
#include <string>
^
Libraries/BasicLib/BasicLibLogger.h:18:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibLogger.h:19:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibLogger.h:21:24: warning: code should be clang-formatted [-Wclang-format-violations]
    class TextDecorator
                       ^
Libraries/BasicLib/BasicLibLogger.h:22:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibLogger.h:23:12: warning: code should be clang-formatted [-Wclang-format-violations]
    public:
           ^
Libraries/BasicLib/BasicLibLogger.h:24:39: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string FileHeader( const std::string& p_title )
                                      ^
Libraries/BasicLib/BasicLibLogger.h:24:57: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string FileHeader( const std::string& p_title )
                                                        ^
Libraries/BasicLib/BasicLibLogger.h:24:58: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string FileHeader( const std::string& p_title )
                                                         ^
Libraries/BasicLib/BasicLibLogger.h:24:66: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string FileHeader( const std::string& p_title )
                                                                 ^
Libraries/BasicLib/BasicLibLogger.h:24:68: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string FileHeader( const std::string& p_title )
                                                                   ^
Libraries/BasicLib/BasicLibLogger.h:25:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibLogger.h:26:76: warning: code should be clang-formatted [-Wclang-format-violations]
            return "==================================================\n" +
                                                                           ^
Libraries/BasicLib/BasicLibLogger.h:27:29: warning: code should be clang-formatted [-Wclang-format-violations]
                   p_title + "\n" +
                            ^
Libraries/BasicLib/BasicLibLogger.h:27:36: warning: code should be clang-formatted [-Wclang-format-violations]
                   p_title + "\n" +
                                   ^
Libraries/BasicLib/BasicLibLogger.h:28:77: warning: code should be clang-formatted [-Wclang-format-violations]
                   "==================================================\n\n";
                                                                            ^
Libraries/BasicLib/BasicLibLogger.h:29:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibLogger.h:31:41: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string SessionOpen()
                                        ^
Libraries/BasicLib/BasicLibLogger.h:32:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibLogger.h:33:25: warning: code should be clang-formatted [-Wclang-format-violations]
            return "\n";
                        ^
Libraries/BasicLib/BasicLibLogger.h:34:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibLogger.h:36:42: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string SessionClose()
                                         ^
Libraries/BasicLib/BasicLibLogger.h:37:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibLogger.h:38:25: warning: code should be clang-formatted [-Wclang-format-violations]
            return "\n";
                        ^
Libraries/BasicLib/BasicLibLogger.h:39:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibLogger.h:41:37: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string Decorate( const std::string& p_string )
                                    ^
Libraries/BasicLib/BasicLibLogger.h:41:55: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string Decorate( const std::string& p_string )
                                                      ^
Libraries/BasicLib/BasicLibLogger.h:41:56: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string Decorate( const std::string& p_string )
                                                       ^
Libraries/BasicLib/BasicLibLogger.h:41:65: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string Decorate( const std::string& p_string )
                                                                ^
Libraries/BasicLib/BasicLibLogger.h:41:67: warning: code should be clang-formatted [-Wclang-format-violations]
        static std::string Decorate( const std::string& p_string )
                                                                  ^
Libraries/BasicLib/BasicLibLogger.h:42:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibLogger.h:43:36: warning: code should be clang-formatted [-Wclang-format-violations]
            return p_string + "\n";
                                   ^
Libraries/BasicLib/BasicLibLogger.h:44:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibLogger.h:45:7: warning: code should be clang-formatted [-Wclang-format-violations]
    };
      ^
Libraries/BasicLib/BasicLibLogger.h:48:13: warning: code should be clang-formatted [-Wclang-format-violations]
    template<class decorator>
            ^
Libraries/BasicLib/BasicLibLogger.h:48:30: warning: code should be clang-formatted [-Wclang-format-violations]
    template<class decorator>
                             ^
Libraries/BasicLib/BasicLibLogger.h:49:17: warning: code should be clang-formatted [-Wclang-format-violations]
    class Logger
                ^
Libraries/BasicLib/BasicLibLogger.h:50:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibLogger.h:51:12: warning: code should be clang-formatted [-Wclang-format-violations]
    public:
           ^
Libraries/BasicLib/BasicLibLogger.h:52:16: warning: code should be clang-formatted [-Wclang-format-violations]
        Logger( const std::string& p_filename,
               ^
Libraries/BasicLib/BasicLibLogger.h:52:34: warning: code should be clang-formatted [-Wclang-format-violations]
        Logger( const std::string& p_filename,
                                 ^
Libraries/BasicLib/BasicLibLogger.h:52:35: warning: code should be clang-formatted [-Wclang-format-violations]
        Logger( const std::string& p_filename,
                                  ^
Libraries/BasicLib/BasicLibLogger.h:52:47: warning: code should be clang-formatted [-Wclang-format-violations]
        Logger( const std::string& p_filename,
                                              ^
Libraries/BasicLib/BasicLibLogger.h:53:34: warning: code should be clang-formatted [-Wclang-format-violations]
                const std::string& p_logtitle,
                                 ^
Libraries/BasicLib/BasicLibLogger.h:53:35: warning: code should be clang-formatted [-Wclang-format-violations]
                const std::string& p_logtitle,
                                  ^
Libraries/BasicLib/BasicLibLogger.h:53:47: warning: code should be clang-formatted [-Wclang-format-violations]
                const std::string& p_logtitle,
                                              ^
Libraries/BasicLib/BasicLibLogger.h:54:42: warning: code should be clang-formatted [-Wclang-format-violations]
                bool p_timestamp = false,
                                         ^
Libraries/BasicLib/BasicLibLogger.h:55:41: warning: code should be clang-formatted [-Wclang-format-violations]
                bool p_datestamp = false );
                                        ^
Libraries/BasicLib/BasicLibLogger.h:55:44: warning: code should be clang-formatted [-Wclang-format-violations]
                bool p_datestamp = false );
                                           ^
Libraries/BasicLib/BasicLibLogger.h:57:19: warning: code should be clang-formatted [-Wclang-format-violations]
        ~Logger();
                  ^
Libraries/BasicLib/BasicLibLogger.h:58:18: warning: code should be clang-formatted [-Wclang-format-violations]
        void Log( const std::string& p_entry );
                 ^
Libraries/BasicLib/BasicLibLogger.h:58:36: warning: code should be clang-formatted [-Wclang-format-violations]
        void Log( const std::string& p_entry );
                                   ^
Libraries/BasicLib/BasicLibLogger.h:58:37: warning: code should be clang-formatted [-Wclang-format-violations]
        void Log( const std::string& p_entry );
                                    ^
Libraries/BasicLib/BasicLibLogger.h:58:45: warning: code should be clang-formatted [-Wclang-format-violations]
        void Log( const std::string& p_entry );
                                            ^
Libraries/BasicLib/BasicLibLogger.h:58:48: warning: code should be clang-formatted [-Wclang-format-violations]
        void Log( const std::string& p_entry );
                                               ^
Libraries/BasicLib/BasicLibLogger.h:60:15: warning: code should be clang-formatted [-Wclang-format-violations]
    protected:
              ^
Libraries/BasicLib/BasicLibLogger.h:61:32: warning: code should be clang-formatted [-Wclang-format-violations]
        std::fstream m_logfile;
                               ^
Libraries/BasicLib/BasicLibLogger.h:62:26: warning: code should be clang-formatted [-Wclang-format-violations]
        bool m_timestamp;
                         ^
Libraries/BasicLib/BasicLibLogger.h:63:26: warning: code should be clang-formatted [-Wclang-format-violations]
        bool m_datestamp;
                         ^
Libraries/BasicLib/BasicLibLogger.h:65:7: warning: code should be clang-formatted [-Wclang-format-violations]
    };
      ^
Libraries/BasicLib/BasicLibLogger.h:68:43: warning: code should be clang-formatted [-Wclang-format-violations]
    typedef Logger<TextDecorator> TextLog;
                                          ^
Libraries/BasicLib/BasicLibLogger.h:72:9: warning: code should be clang-formatted [-Wclang-format-violations]
template<class decorator>
        ^
Libraries/BasicLib/BasicLibLogger.h:73:27: warning: code should be clang-formatted [-Wclang-format-violations]
Logger<decorator>::Logger( const std::string& p_filename,
                          ^
Libraries/BasicLib/BasicLibLogger.h:73:45: warning: code should be clang-formatted [-Wclang-format-violations]
Logger<decorator>::Logger( const std::string& p_filename,
                                            ^
Libraries/BasicLib/BasicLibLogger.h:73:46: warning: code should be clang-formatted [-Wclang-format-violations]
Logger<decorator>::Logger( const std::string& p_filename,
                                             ^
Libraries/BasicLib/BasicLibLogger.h:73:58: warning: code should be clang-formatted [-Wclang-format-violations]
Logger<decorator>::Logger( const std::string& p_filename,
                                                         ^
Libraries/BasicLib/BasicLibLogger.h:74:45: warning: code should be clang-formatted [-Wclang-format-violations]
                           const std::string& p_logtitle,
                                            ^
Libraries/BasicLib/BasicLibLogger.h:74:46: warning: code should be clang-formatted [-Wclang-format-violations]
                           const std::string& p_logtitle,
                                             ^
Libraries/BasicLib/BasicLibLogger.h:74:58: warning: code should be clang-formatted [-Wclang-format-violations]
                           const std::string& p_logtitle,
                                                         ^
Libraries/BasicLib/BasicLibLogger.h:75:45: warning: code should be clang-formatted [-Wclang-format-violations]
                           bool p_timestamp,
                                            ^
Libraries/BasicLib/BasicLibLogger.h:76:44: warning: code should be clang-formatted [-Wclang-format-violations]
                           bool p_datestamp )
                                           ^
Libraries/BasicLib/BasicLibLogger.h:76:46: warning: code should be clang-formatted [-Wclang-format-violations]
                           bool p_datestamp )
                                             ^
Libraries/BasicLib/BasicLibLogger.h:77:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibLogger.h:78:71: warning: code should be clang-formatted [-Wclang-format-violations]
    // now the tricky part... testing to see if a file is open or not.
                                                                      ^
Libraries/BasicLib/BasicLibLogger.h:79:75: warning: code should be clang-formatted [-Wclang-format-violations]
    // stupid C++. You need to open a file in read mode, and if it doesn't
                                                                          ^
Libraries/BasicLib/BasicLibLogger.h:80:55: warning: code should be clang-formatted [-Wclang-format-violations]
    // open correctly, you know that it doesn't exist.
                                                      ^
Libraries/BasicLib/BasicLibLogger.h:81:29: warning: code should be clang-formatted [-Wclang-format-violations]
    std::fstream filetester( p_filename.c_str(), std::ios::in );
                            ^
Libraries/BasicLib/BasicLibLogger.h:81:62: warning: code should be clang-formatted [-Wclang-format-violations]
    std::fstream filetester( p_filename.c_str(), std::ios::in );
                                                             ^
Libraries/BasicLib/BasicLibLogger.h:81:65: warning: code should be clang-formatted [-Wclang-format-violations]
    std::fstream filetester( p_filename.c_str(), std::ios::in );
                                                                ^
Libraries/BasicLib/BasicLibLogger.h:83:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( filetester.is_open() )
      ^
Libraries/BasicLib/BasicLibLogger.h:83:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( filetester.is_open() )
       ^
Libraries/BasicLib/BasicLibLogger.h:83:29: warning: code should be clang-formatted [-Wclang-format-violations]
    if( filetester.is_open() )
                            ^
Libraries/BasicLib/BasicLibLogger.h:83:31: warning: code should be clang-formatted [-Wclang-format-violations]
    if( filetester.is_open() )
                              ^
Libraries/BasicLib/BasicLibLogger.h:84:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibLogger.h:85:56: warning: code should be clang-formatted [-Wclang-format-violations]
        // the file exists, so just close the test file
                                                       ^
Libraries/BasicLib/BasicLibLogger.h:86:28: warning: code should be clang-formatted [-Wclang-format-violations]
        filetester.close();
                           ^
Libraries/BasicLib/BasicLibLogger.h:88:30: warning: code should be clang-formatted [-Wclang-format-violations]
        // open the real file
                             ^
Libraries/BasicLib/BasicLibLogger.h:89:24: warning: code should be clang-formatted [-Wclang-format-violations]
        m_logfile.open( p_filename.c_str(), std::ios::out | std::ios::app );
                       ^
Libraries/BasicLib/BasicLibLogger.h:89:74: warning: code should be clang-formatted [-Wclang-format-violations]
        m_logfile.open( p_filename.c_str(), std::ios::out | std::ios::app );
                                                                         ^
Libraries/BasicLib/BasicLibLogger.h:89:77: warning: code should be clang-formatted [-Wclang-format-violations]
        m_logfile.open( p_filename.c_str(), std::ios::out | std::ios::app );
                                                                            ^
Libraries/BasicLib/BasicLibLogger.h:90:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibLogger.h:91:9: warning: code should be clang-formatted [-Wclang-format-violations]
    else
        ^
Libraries/BasicLib/BasicLibLogger.h:92:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibLogger.h:93:31: warning: code should be clang-formatted [-Wclang-format-violations]
        // file doesn't exist.
                              ^
Libraries/BasicLib/BasicLibLogger.h:94:24: warning: code should be clang-formatted [-Wclang-format-violations]
        m_logfile.open( p_filename.c_str(), std::ios::out );
                       ^
Libraries/BasicLib/BasicLibLogger.h:94:58: warning: code should be clang-formatted [-Wclang-format-violations]
        m_logfile.open( p_filename.c_str(), std::ios::out );
                                                         ^
Libraries/BasicLib/BasicLibLogger.h:94:61: warning: code should be clang-formatted [-Wclang-format-violations]
        m_logfile.open( p_filename.c_str(), std::ios::out );
                                                            ^
Libraries/BasicLib/BasicLibLogger.h:96:47: warning: code should be clang-formatted [-Wclang-format-violations]
        // print out a file header to the file
                                              ^
Libraries/BasicLib/BasicLibLogger.h:97:44: warning: code should be clang-formatted [-Wclang-format-violations]
        m_logfile << decorator::FileHeader( p_logtitle );
                                           ^
Libraries/BasicLib/BasicLibLogger.h:97:55: warning: code should be clang-formatted [-Wclang-format-violations]
        m_logfile << decorator::FileHeader( p_logtitle );
                                                      ^
Libraries/BasicLib/BasicLibLogger.h:97:58: warning: code should be clang-formatted [-Wclang-format-violations]
        m_logfile << decorator::FileHeader( p_logtitle );
                                                         ^
Libraries/BasicLib/BasicLibLogger.h:98:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibLogger.h:100:77: warning: code should be clang-formatted [-Wclang-format-violations]
    // print out an opening statement. Make sure it is time-and-date-stamped
                                                                            ^
Libraries/BasicLib/BasicLibLogger.h:101:16: warning: code should be clang-formatted [-Wclang-format-violations]
    // as well.
               ^
Libraries/BasicLib/BasicLibLogger.h:102:24: warning: code should be clang-formatted [-Wclang-format-violations]
    m_timestamp = true;
                       ^
Libraries/BasicLib/BasicLibLogger.h:103:24: warning: code should be clang-formatted [-Wclang-format-violations]
    m_datestamp = true;
                       ^
Libraries/BasicLib/BasicLibLogger.h:104:43: warning: code should be clang-formatted [-Wclang-format-violations]
    m_logfile << decorator::SessionOpen();
                                          ^
Libraries/BasicLib/BasicLibLogger.h:105:9: warning: code should be clang-formatted [-Wclang-format-violations]
    Log( "Session opened." );
        ^
Libraries/BasicLib/BasicLibLogger.h:105:27: warning: code should be clang-formatted [-Wclang-format-violations]
    Log( "Session opened." );
                          ^
Libraries/BasicLib/BasicLibLogger.h:105:30: warning: code should be clang-formatted [-Wclang-format-violations]
    Log( "Session opened." );
                             ^
Libraries/BasicLib/BasicLibLogger.h:106:31: warning: code should be clang-formatted [-Wclang-format-violations]
    m_timestamp = p_timestamp;
                              ^
Libraries/BasicLib/BasicLibLogger.h:107:31: warning: code should be clang-formatted [-Wclang-format-violations]
    m_datestamp = p_datestamp;
                              ^
Libraries/BasicLib/BasicLibLogger.h:111:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< class decorator >
        ^
Libraries/BasicLib/BasicLibLogger.h:111:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< class decorator >
         ^
Libraries/BasicLib/BasicLibLogger.h:111:26: warning: code should be clang-formatted [-Wclang-format-violations]
template< class decorator >
                         ^
Libraries/BasicLib/BasicLibLogger.h:111:28: warning: code should be clang-formatted [-Wclang-format-violations]
template< class decorator >
                           ^
Libraries/BasicLib/BasicLibLogger.h:112:8: warning: code should be clang-formatted [-Wclang-format-violations]
Logger< decorator >::~Logger()
       ^
Libraries/BasicLib/BasicLibLogger.h:112:18: warning: code should be clang-formatted [-Wclang-format-violations]
Logger< decorator >::~Logger()
                 ^
Libraries/BasicLib/BasicLibLogger.h:112:31: warning: code should be clang-formatted [-Wclang-format-violations]
Logger< decorator >::~Logger()
                              ^
Libraries/BasicLib/BasicLibLogger.h:113:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibLogger.h:114:24: warning: code should be clang-formatted [-Wclang-format-violations]
    m_timestamp = true;
                       ^
Libraries/BasicLib/BasicLibLogger.h:115:24: warning: code should be clang-formatted [-Wclang-format-violations]
    m_datestamp = true;
                       ^
Libraries/BasicLib/BasicLibLogger.h:116:9: warning: code should be clang-formatted [-Wclang-format-violations]
    Log( "Session closed." );
        ^
Libraries/BasicLib/BasicLibLogger.h:116:27: warning: code should be clang-formatted [-Wclang-format-violations]
    Log( "Session closed." );
                          ^
Libraries/BasicLib/BasicLibLogger.h:116:30: warning: code should be clang-formatted [-Wclang-format-violations]
    Log( "Session closed." );
                             ^
Libraries/BasicLib/BasicLibLogger.h:117:44: warning: code should be clang-formatted [-Wclang-format-violations]
    m_logfile << decorator::SessionClose();
                                           ^
Libraries/BasicLib/BasicLibLogger.h:119:2: warning: code should be clang-formatted [-Wclang-format-violations]
}
 ^
Libraries/BasicLib/BasicLibLogger.h:122:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< class decorator >
        ^
Libraries/BasicLib/BasicLibLogger.h:122:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< class decorator >
         ^
Libraries/BasicLib/BasicLibLogger.h:122:26: warning: code should be clang-formatted [-Wclang-format-violations]
template< class decorator >
                         ^
Libraries/BasicLib/BasicLibLogger.h:123:13: warning: code should be clang-formatted [-Wclang-format-violations]
void Logger< decorator >::Log( const std::string& p_entry )
            ^
Libraries/BasicLib/BasicLibLogger.h:123:23: warning: code should be clang-formatted [-Wclang-format-violations]
void Logger< decorator >::Log( const std::string& p_entry )
                      ^
Libraries/BasicLib/BasicLibLogger.h:123:31: warning: code should be clang-formatted [-Wclang-format-violations]
void Logger< decorator >::Log( const std::string& p_entry )
                              ^
Libraries/BasicLib/BasicLibLogger.h:123:49: warning: code should be clang-formatted [-Wclang-format-violations]
void Logger< decorator >::Log( const std::string& p_entry )
                                                ^
Libraries/BasicLib/BasicLibLogger.h:123:50: warning: code should be clang-formatted [-Wclang-format-violations]
void Logger< decorator >::Log( const std::string& p_entry )
                                                 ^
Libraries/BasicLib/BasicLibLogger.h:123:58: warning: code should be clang-formatted [-Wclang-format-violations]
void Logger< decorator >::Log( const std::string& p_entry )
                                                         ^
Libraries/BasicLib/BasicLibLogger.h:123:60: warning: code should be clang-formatted [-Wclang-format-violations]
void Logger< decorator >::Log( const std::string& p_entry )
                                                           ^
Libraries/BasicLib/BasicLibLogger.h:124:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibLogger.h:125:25: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string message;
                        ^
Libraries/BasicLib/BasicLibLogger.h:127:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( m_datestamp )
      ^
Libraries/BasicLib/BasicLibLogger.h:127:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( m_datestamp )
       ^
Libraries/BasicLib/BasicLibLogger.h:127:20: warning: code should be clang-formatted [-Wclang-format-violations]
    if( m_datestamp )
                   ^
Libraries/BasicLib/BasicLibLogger.h:127:22: warning: code should be clang-formatted [-Wclang-format-violations]
    if( m_datestamp )
                     ^
Libraries/BasicLib/BasicLibLogger.h:128:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibLogger.h:129:45: warning: code should be clang-formatted [-Wclang-format-violations]
        message += "[" + DateStamp() + "] ";
                                            ^
Libraries/BasicLib/BasicLibLogger.h:130:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibLogger.h:131:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( m_timestamp )
      ^
Libraries/BasicLib/BasicLibLogger.h:131:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( m_timestamp )
       ^
Libraries/BasicLib/BasicLibLogger.h:131:20: warning: code should be clang-formatted [-Wclang-format-violations]
    if( m_timestamp )
                   ^
Libraries/BasicLib/BasicLibLogger.h:131:22: warning: code should be clang-formatted [-Wclang-format-violations]
    if( m_timestamp )
                     ^
Libraries/BasicLib/BasicLibLogger.h:132:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibLogger.h:133:45: warning: code should be clang-formatted [-Wclang-format-violations]
        message += "[" + TimeStamp() + "] ";
                                            ^
Libraries/BasicLib/BasicLibLogger.h:134:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibLogger.h:136:24: warning: code should be clang-formatted [-Wclang-format-violations]
    message += p_entry;
                       ^
Libraries/BasicLib/BasicLibLogger.h:137:38: warning: code should be clang-formatted [-Wclang-format-violations]
    m_logfile << decorator::Decorate( message );
                                     ^
Libraries/BasicLib/BasicLibLogger.h:137:46: warning: code should be clang-formatted [-Wclang-format-violations]
    m_logfile << decorator::Decorate( message );
                                             ^
Libraries/BasicLib/BasicLibLogger.h:137:49: warning: code should be clang-formatted [-Wclang-format-violations]
    m_logfile << decorator::Decorate( message );
                                                ^
Libraries/BasicLib/BasicLibLogger.h:139:2: warning: code should be clang-formatted [-Wclang-format-violations]
}
 ^
Libraries/BasicLib/BasicLibLogger.h:151:28: warning: code should be clang-formatted [-Wclang-format-violations]
} // end namespace BasicLib
                           ^
Libraries/BasicLib/BasicLibRandom.h:4:74: warning: code should be clang-formatted [-Wclang-format-violations]
// BasicLibRandom.h - This file contains random number related functions.
                                                                         ^
Libraries/BasicLib/BasicLibRandom.h:10:1: warning: code should be clang-formatted [-Wclang-format-violations]
#include <stdlib.h>
^
Libraries/BasicLib/BasicLibRandom.h:15:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibRandom.h:16:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibRandom.h:19:9: warning: code should be clang-formatted [-Wclang-format-violations]
template<typename type, type modulus, type multiplier, type increment>
        ^
Libraries/BasicLib/BasicLibRandom.h:20:25: warning: code should be clang-formatted [-Wclang-format-violations]
struct linear_congruency
                        ^
Libraries/BasicLib/BasicLibRandom.h:21:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibRandom.h:22:23: warning: code should be clang-formatted [-Wclang-format-violations]
    linear_congruency( type p_seed = 0 )
                      ^
Libraries/BasicLib/BasicLibRandom.h:22:39: warning: code should be clang-formatted [-Wclang-format-violations]
    linear_congruency( type p_seed = 0 )
                                      ^
Libraries/BasicLib/BasicLibRandom.h:22:41: warning: code should be clang-formatted [-Wclang-format-violations]
    linear_congruency( type p_seed = 0 )
                                        ^
Libraries/BasicLib/BasicLibRandom.h:23:18: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_seed( p_seed )
                 ^
Libraries/BasicLib/BasicLibRandom.h:23:25: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_seed( p_seed )
                        ^
Libraries/BasicLib/BasicLibRandom.h:23:27: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_seed( p_seed )
                          ^
Libraries/BasicLib/BasicLibRandom.h:24:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {  /* do nothing */ }
     ^
Libraries/BasicLib/BasicLibRandom.h:24:24: warning: code should be clang-formatted [-Wclang-format-violations]
    {  /* do nothing */ }
                       ^
Libraries/BasicLib/BasicLibRandom.h:24:26: warning: code should be clang-formatted [-Wclang-format-violations]
    {  /* do nothing */ }
                         ^
Libraries/BasicLib/BasicLibRandom.h:27:15: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed = 0 )
              ^
Libraries/BasicLib/BasicLibRandom.h:27:31: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed = 0 )
                              ^
Libraries/BasicLib/BasicLibRandom.h:27:33: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed = 0 )
                                ^
Libraries/BasicLib/BasicLibRandom.h:28:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:29:25: warning: code should be clang-formatted [-Wclang-format-violations]
        m_seed = p_seed;
                        ^
Libraries/BasicLib/BasicLibRandom.h:30:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:33:33: warning: code should be clang-formatted [-Wclang-format-violations]
    type minimum() { return 0; }
                                ^
Libraries/BasicLib/BasicLibRandom.h:34:43: warning: code should be clang-formatted [-Wclang-format-violations]
    type maximum() { return modulus - 1; }
                                          ^
Libraries/BasicLib/BasicLibRandom.h:36:22: warning: code should be clang-formatted [-Wclang-format-violations]
    type operator()()
                     ^
Libraries/BasicLib/BasicLibRandom.h:37:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:38:62: warning: code should be clang-formatted [-Wclang-format-violations]
        m_seed = (multiplier * m_seed + increment) % modulus;
                                                             ^
Libraries/BasicLib/BasicLibRandom.h:39:23: warning: code should be clang-formatted [-Wclang-format-violations]
        return m_seed;
                      ^
Libraries/BasicLib/BasicLibRandom.h:42:11: warning: code should be clang-formatted [-Wclang-format-violations]
protected:
          ^
Libraries/BasicLib/BasicLibRandom.h:45:3: warning: code should be clang-formatted [-Wclang-format-violations]
};
  ^
Libraries/BasicLib/BasicLibRandom.h:49:3: warning: code should be clang-formatted [-Wclang-format-violations]
//typedef linear_congruency<uint64, 18446744073709551615, 6364136223846793005, 12345> randon64;
  ^
Libraries/BasicLib/BasicLibRandom.h:49:79: warning: code should be clang-formatted [-Wclang-format-violations]
//typedef linear_congruency<uint64, 18446744073709551615, 6364136223846793005, 12345> randon64;
                                                                              ^
Libraries/BasicLib/BasicLibRandom.h:49:96: warning: code should be clang-formatted [-Wclang-format-violations]
//typedef linear_congruency<uint64, 18446744073709551615, 6364136223846793005, 12345> randon64;
                                                                                               ^
Libraries/BasicLib/BasicLibRandom.h:54:67: warning: code should be clang-formatted [-Wclang-format-violations]
//  returns a random double number from [0..1, inclusivity of 1 is 
                                                                  ^
Libraries/BasicLib/BasicLibRandom.h:57:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< bool inclusive, typename generator = random >
        ^
Libraries/BasicLib/BasicLibRandom.h:57:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< bool inclusive, typename generator = random >
         ^
Libraries/BasicLib/BasicLibRandom.h:57:54: warning: code should be clang-formatted [-Wclang-format-violations]
template< bool inclusive, typename generator = random >
                                                     ^
Libraries/BasicLib/BasicLibRandom.h:57:56: warning: code should be clang-formatted [-Wclang-format-violations]
template< bool inclusive, typename generator = random >
                                                       ^
Libraries/BasicLib/BasicLibRandom.h:58:22: warning: code should be clang-formatted [-Wclang-format-violations]
struct random_percent
                     ^
Libraries/BasicLib/BasicLibRandom.h:59:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibRandom.h:60:33: warning: code should be clang-formatted [-Wclang-format-violations]
    random_percent() { init(); }
                                ^
Libraries/BasicLib/BasicLibRandom.h:61:20: warning: code should be clang-formatted [-Wclang-format-violations]
    random_percent( generator& p_generator )
                   ^
Libraries/BasicLib/BasicLibRandom.h:61:30: warning: code should be clang-formatted [-Wclang-format-violations]
    random_percent( generator& p_generator )
                             ^
Libraries/BasicLib/BasicLibRandom.h:61:31: warning: code should be clang-formatted [-Wclang-format-violations]
    random_percent( generator& p_generator )
                              ^
Libraries/BasicLib/BasicLibRandom.h:61:43: warning: code should be clang-formatted [-Wclang-format-violations]
    random_percent( generator& p_generator )
                                          ^
Libraries/BasicLib/BasicLibRandom.h:61:45: warning: code should be clang-formatted [-Wclang-format-violations]
    random_percent( generator& p_generator )
                                            ^
Libraries/BasicLib/BasicLibRandom.h:62:23: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    { init(); }
                      ^
Libraries/BasicLib/BasicLibRandom.h:62:35: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    { init(); }
                                  ^
Libraries/BasicLib/BasicLibRandom.h:62:37: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    { init(); }
                                    ^
Libraries/BasicLib/BasicLibRandom.h:62:52: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    { init(); }
                                                   ^
Libraries/BasicLib/BasicLibRandom.h:64:16: warning: code should be clang-formatted [-Wclang-format-violations]
    void init()
               ^
Libraries/BasicLib/BasicLibRandom.h:65:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:66:39: warning: code should be clang-formatted [-Wclang-format-violations]
        m_max = m_generator.maximum();
                                      ^
Libraries/BasicLib/BasicLibRandom.h:68:76: warning: code should be clang-formatted [-Wclang-format-violations]
        // if 1.0 is exclusive, then the max should be incremented, so that
                                                                           ^
Libraries/BasicLib/BasicLibRandom.h:69:35: warning: code should be clang-formatted [-Wclang-format-violations]
        // 1.0 is never generated.
                                  ^
Libraries/BasicLib/BasicLibRandom.h:70:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( !inclusive )
          ^
Libraries/BasicLib/BasicLibRandom.h:70:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( !inclusive )
           ^
Libraries/BasicLib/BasicLibRandom.h:70:23: warning: code should be clang-formatted [-Wclang-format-violations]
        if( !inclusive )
                      ^
Libraries/BasicLib/BasicLibRandom.h:70:25: warning: code should be clang-formatted [-Wclang-format-violations]
        if( !inclusive )
                        ^
Libraries/BasicLib/BasicLibRandom.h:71:26: warning: code should be clang-formatted [-Wclang-format-violations]
            m_max += 1.0;
                         ^
Libraries/BasicLib/BasicLibRandom.h:72:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:74:13: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
            ^
Libraries/BasicLib/BasicLibRandom.h:74:14: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
             ^
Libraries/BasicLib/BasicLibRandom.h:74:28: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
                           ^
Libraries/BasicLib/BasicLibRandom.h:74:30: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
                             ^
Libraries/BasicLib/BasicLibRandom.h:75:15: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
              ^
Libraries/BasicLib/BasicLibRandom.h:75:27: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                          ^
Libraries/BasicLib/BasicLibRandom.h:75:29: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                            ^
Libraries/BasicLib/BasicLibRandom.h:75:51: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                  ^
Libraries/BasicLib/BasicLibRandom.h:75:58: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                         ^
Libraries/BasicLib/BasicLibRandom.h:75:63: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                              ^
Libraries/BasicLib/BasicLibRandom.h:77:63: warning: code should be clang-formatted [-Wclang-format-violations]
    double minimum() { return m_generator.minimum() / m_max; }
                                                              ^
Libraries/BasicLib/BasicLibRandom.h:78:63: warning: code should be clang-formatted [-Wclang-format-violations]
    double maximum() { return m_generator.maximum() / m_max; }
                                                              ^
Libraries/BasicLib/BasicLibRandom.h:80:24: warning: code should be clang-formatted [-Wclang-format-violations]
    double operator()()
                       ^
Libraries/BasicLib/BasicLibRandom.h:81:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:82:38: warning: code should be clang-formatted [-Wclang-format-violations]
        return m_generator() / m_max;
                                     ^
Libraries/BasicLib/BasicLibRandom.h:85:11: warning: code should be clang-formatted [-Wclang-format-violations]
protected:
          ^
Libraries/BasicLib/BasicLibRandom.h:86:27: warning: code should be clang-formatted [-Wclang-format-violations]
    generator m_generator;
                          ^
Libraries/BasicLib/BasicLibRandom.h:87:18: warning: code should be clang-formatted [-Wclang-format-violations]
    double m_max;
                 ^
Libraries/BasicLib/BasicLibRandom.h:89:3: warning: code should be clang-formatted [-Wclang-format-violations]
};
  ^
Libraries/BasicLib/BasicLibRandom.h:93:56: warning: code should be clang-formatted [-Wclang-format-violations]
typedef random_percent<false> random_percent_exclusive;
                                                       ^
Libraries/BasicLib/BasicLibRandom.h:97:9: warning: code should be clang-formatted [-Wclang-format-violations]
template<bool inclusive, typename generator = random_percent<inclusive> >
        ^
Libraries/BasicLib/BasicLibRandom.h:97:72: warning: code should be clang-formatted [-Wclang-format-violations]
template<bool inclusive, typename generator = random_percent<inclusive> >
                                                                       ^
Libraries/BasicLib/BasicLibRandom.h:98:24: warning: code should be clang-formatted [-Wclang-format-violations]
struct normal_generator
                       ^
Libraries/BasicLib/BasicLibRandom.h:99:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibRandom.h:101:22: warning: code should be clang-formatted [-Wclang-format-violations]
    normal_generator( double p_mean = 0, double p_sigma = 1 )
                     ^
Libraries/BasicLib/BasicLibRandom.h:101:60: warning: code should be clang-formatted [-Wclang-format-violations]
    normal_generator( double p_mean = 0, double p_sigma = 1 )
                                                           ^
Libraries/BasicLib/BasicLibRandom.h:101:62: warning: code should be clang-formatted [-Wclang-format-violations]
    normal_generator( double p_mean = 0, double p_sigma = 1 )
                                                             ^
Libraries/BasicLib/BasicLibRandom.h:102:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:103:14: warning: code should be clang-formatted [-Wclang-format-violations]
        init( p_mean, p_sigma );
             ^
Libraries/BasicLib/BasicLibRandom.h:103:30: warning: code should be clang-formatted [-Wclang-format-violations]
        init( p_mean, p_sigma );
                             ^
Libraries/BasicLib/BasicLibRandom.h:103:33: warning: code should be clang-formatted [-Wclang-format-violations]
        init( p_mean, p_sigma );
                                ^
Libraries/BasicLib/BasicLibRandom.h:104:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:106:22: warning: code should be clang-formatted [-Wclang-format-violations]
    normal_generator( generator& p_generator, 
                     ^
Libraries/BasicLib/BasicLibRandom.h:106:32: warning: code should be clang-formatted [-Wclang-format-violations]
    normal_generator( generator& p_generator, 
                               ^
Libraries/BasicLib/BasicLibRandom.h:106:33: warning: code should be clang-formatted [-Wclang-format-violations]
    normal_generator( generator& p_generator, 
                                ^
Libraries/BasicLib/BasicLibRandom.h:106:46: warning: code should be clang-formatted [-Wclang-format-violations]
    normal_generator( generator& p_generator, 
                                             ^
Libraries/BasicLib/BasicLibRandom.h:107:41: warning: code should be clang-formatted [-Wclang-format-violations]
                      double p_mean = 0,
                                        ^
Libraries/BasicLib/BasicLibRandom.h:108:41: warning: code should be clang-formatted [-Wclang-format-violations]
                      double p_sigma = 1 )
                                        ^
Libraries/BasicLib/BasicLibRandom.h:108:43: warning: code should be clang-formatted [-Wclang-format-violations]
                      double p_sigma = 1 )
                                          ^
Libraries/BasicLib/BasicLibRandom.h:109:23: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )
                      ^
Libraries/BasicLib/BasicLibRandom.h:109:35: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )
                                  ^
Libraries/BasicLib/BasicLibRandom.h:109:37: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )
                                    ^
Libraries/BasicLib/BasicLibRandom.h:110:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:111:14: warning: code should be clang-formatted [-Wclang-format-violations]
        init( p_mean, p_sigma );
             ^
Libraries/BasicLib/BasicLibRandom.h:111:30: warning: code should be clang-formatted [-Wclang-format-violations]
        init( p_mean, p_sigma );
                             ^
Libraries/BasicLib/BasicLibRandom.h:111:33: warning: code should be clang-formatted [-Wclang-format-violations]
        init( p_mean, p_sigma );
                                ^
Libraries/BasicLib/BasicLibRandom.h:112:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:114:15: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( double p_mean, double p_sigma )
              ^
Libraries/BasicLib/BasicLibRandom.h:114:45: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( double p_mean, double p_sigma )
                                            ^
Libraries/BasicLib/BasicLibRandom.h:114:47: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( double p_mean, double p_sigma )
                                              ^
Libraries/BasicLib/BasicLibRandom.h:115:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:116:25: warning: code should be clang-formatted [-Wclang-format-violations]
        m_mean = p_mean;
                        ^
Libraries/BasicLib/BasicLibRandom.h:117:27: warning: code should be clang-formatted [-Wclang-format-violations]
        m_sigma = p_sigma;
                          ^
Libraries/BasicLib/BasicLibRandom.h:118:25: warning: code should be clang-formatted [-Wclang-format-violations]
        m_valid = false;
                        ^
Libraries/BasicLib/BasicLibRandom.h:119:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:123:37: warning: code should be clang-formatted [-Wclang-format-violations]
    double mean() { return m_mean; }
                                    ^
Libraries/BasicLib/BasicLibRandom.h:124:39: warning: code should be clang-formatted [-Wclang-format-violations]
    double sigma() { return m_sigma; }
                                      ^
Libraries/BasicLib/BasicLibRandom.h:125:38: warning: code should be clang-formatted [-Wclang-format-violations]
    void reset() { m_valid = false; }
                                     ^
Libraries/BasicLib/BasicLibRandom.h:127:24: warning: code should be clang-formatted [-Wclang-format-violations]
    double operator()()
                       ^
Libraries/BasicLib/BasicLibRandom.h:128:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:129:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if(!m_valid) 
          ^
Libraries/BasicLib/BasicLibRandom.h:129:21: warning: code should be clang-formatted [-Wclang-format-violations]
        if(!m_valid) 
                    ^
Libraries/BasicLib/BasicLibRandom.h:130:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibRandom.h:131:36: warning: code should be clang-formatted [-Wclang-format-violations]
            m_rho1 = m_generator();
                                   ^
Libraries/BasicLib/BasicLibRandom.h:132:36: warning: code should be clang-formatted [-Wclang-format-violations]
            m_rho2 = m_generator();
                                   ^
Libraries/BasicLib/BasicLibRandom.h:133:36: warning: code should be clang-formatted [-Wclang-format-violations]
            m_rho = sqrt(-2 * log(1- m_rho2));
                                   ^
Libraries/BasicLib/BasicLibRandom.h:133:47: warning: code should be clang-formatted [-Wclang-format-violations]
            m_rho = sqrt(-2 * log(1- m_rho2));
                                              ^
Libraries/BasicLib/BasicLibRandom.h:134:28: warning: code should be clang-formatted [-Wclang-format-violations]
            m_valid = true;
                           ^
Libraries/BasicLib/BasicLibRandom.h:135:10: warning: code should be clang-formatted [-Wclang-format-violations]
        } 
         ^
Libraries/BasicLib/BasicLibRandom.h:136:13: warning: code should be clang-formatted [-Wclang-format-violations]
        else 
            ^
Libraries/BasicLib/BasicLibRandom.h:137:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibRandom.h:138:29: warning: code should be clang-formatted [-Wclang-format-violations]
            m_valid = false;
                            ^
Libraries/BasicLib/BasicLibRandom.h:139:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibRandom.h:141:25: warning: code should be clang-formatted [-Wclang-format-violations]
        return m_rho * ( m_valid ? cos(2 * pi * m_rho1) : sin( 2 * pi * m_rho1)) * m_sigma + m_mean;
                        ^
Libraries/BasicLib/BasicLibRandom.h:141:63: warning: code should be clang-formatted [-Wclang-format-violations]
        return m_rho * ( m_valid ? cos(2 * pi * m_rho1) : sin( 2 * pi * m_rho1)) * m_sigma + m_mean;
                                                              ^
Libraries/BasicLib/BasicLibRandom.h:141:83: warning: code should be clang-formatted [-Wclang-format-violations]
        return m_rho * ( m_valid ? cos(2 * pi * m_rho1) : sin( 2 * pi * m_rho1)) * m_sigma + m_mean;
                                                                                  ^
Libraries/BasicLib/BasicLibRandom.h:141:93: warning: code should be clang-formatted [-Wclang-format-violations]
        return m_rho * ( m_valid ? cos(2 * pi * m_rho1) : sin( 2 * pi * m_rho1)) * m_sigma + m_mean;
                                                                                            ^
Libraries/BasicLib/BasicLibRandom.h:141:101: warning: code should be clang-formatted [-Wclang-format-violations]
        return m_rho * ( m_valid ? cos(2 * pi * m_rho1) : sin( 2 * pi * m_rho1)) * m_sigma + m_mean;
                                                                                                    ^
Libraries/BasicLib/BasicLibRandom.h:150:3: warning: code should be clang-formatted [-Wclang-format-violations]
};
  ^
Libraries/BasicLib/BasicLibRandom.h:153:46: warning: code should be clang-formatted [-Wclang-format-violations]
typedef normal_generator<true> random_normal;
                                             ^
Libraries/BasicLib/BasicLibRandom.h:160:67: warning: code should be clang-formatted [-Wclang-format-violations]
//  returns a random double number from [a..b, inclusivity of b is 
                                                                  ^
Libraries/BasicLib/BasicLibRandom.h:163:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< bool inclusive, typename generator = random_percent<inclusive> >
        ^
Libraries/BasicLib/BasicLibRandom.h:163:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< bool inclusive, typename generator = random_percent<inclusive> >
         ^
Libraries/BasicLib/BasicLibRandom.h:163:73: warning: code should be clang-formatted [-Wclang-format-violations]
template< bool inclusive, typename generator = random_percent<inclusive> >
                                                                        ^
Libraries/BasicLib/BasicLibRandom.h:164:20: warning: code should be clang-formatted [-Wclang-format-violations]
struct random_range
                   ^
Libraries/BasicLib/BasicLibRandom.h:165:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibRandom.h:166:18: warning: code should be clang-formatted [-Wclang-format-violations]
    random_range( double a = 0, double b = 1 ) 
                 ^
Libraries/BasicLib/BasicLibRandom.h:166:45: warning: code should be clang-formatted [-Wclang-format-violations]
    random_range( double a = 0, double b = 1 ) 
                                            ^
Libraries/BasicLib/BasicLibRandom.h:166:47: warning: code should be clang-formatted [-Wclang-format-violations]
    random_range( double a = 0, double b = 1 ) 
                                              ^
Libraries/BasicLib/BasicLibRandom.h:167:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:168:14: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
             ^
Libraries/BasicLib/BasicLibRandom.h:168:19: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                  ^
Libraries/BasicLib/BasicLibRandom.h:168:22: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                     ^
Libraries/BasicLib/BasicLibRandom.h:169:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:171:18: warning: code should be clang-formatted [-Wclang-format-violations]
    random_range( generator& p_generator, double a = 0, double b = 1 )
                 ^
Libraries/BasicLib/BasicLibRandom.h:171:28: warning: code should be clang-formatted [-Wclang-format-violations]
    random_range( generator& p_generator, double a = 0, double b = 1 )
                           ^
Libraries/BasicLib/BasicLibRandom.h:171:29: warning: code should be clang-formatted [-Wclang-format-violations]
    random_range( generator& p_generator, double a = 0, double b = 1 )
                            ^
Libraries/BasicLib/BasicLibRandom.h:171:69: warning: code should be clang-formatted [-Wclang-format-violations]
    random_range( generator& p_generator, double a = 0, double b = 1 )
                                                                    ^
Libraries/BasicLib/BasicLibRandom.h:171:71: warning: code should be clang-formatted [-Wclang-format-violations]
    random_range( generator& p_generator, double a = 0, double b = 1 )
                                                                      ^
Libraries/BasicLib/BasicLibRandom.h:172:23: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    
                      ^
Libraries/BasicLib/BasicLibRandom.h:172:35: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    
                                  ^
Libraries/BasicLib/BasicLibRandom.h:172:37: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    
                                    ^
Libraries/BasicLib/BasicLibRandom.h:173:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:174:14: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
             ^
Libraries/BasicLib/BasicLibRandom.h:174:19: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                  ^
Libraries/BasicLib/BasicLibRandom.h:174:22: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                     ^
Libraries/BasicLib/BasicLibRandom.h:175:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:177:15: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( double a, double b )
              ^
Libraries/BasicLib/BasicLibRandom.h:177:34: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( double a, double b )
                                 ^
Libraries/BasicLib/BasicLibRandom.h:177:36: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( double a, double b )
                                   ^
Libraries/BasicLib/BasicLibRandom.h:178:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:179:25: warning: code should be clang-formatted [-Wclang-format-violations]
        m_range = b - a;
                        ^
Libraries/BasicLib/BasicLibRandom.h:180:22: warning: code should be clang-formatted [-Wclang-format-violations]
        m_offset = a;
                     ^
Libraries/BasicLib/BasicLibRandom.h:181:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:183:13: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
            ^
Libraries/BasicLib/BasicLibRandom.h:183:14: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
             ^
Libraries/BasicLib/BasicLibRandom.h:183:28: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
                           ^
Libraries/BasicLib/BasicLibRandom.h:183:30: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
                             ^
Libraries/BasicLib/BasicLibRandom.h:184:15: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
              ^
Libraries/BasicLib/BasicLibRandom.h:184:27: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                          ^
Libraries/BasicLib/BasicLibRandom.h:184:29: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                            ^
Libraries/BasicLib/BasicLibRandom.h:184:51: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                  ^
Libraries/BasicLib/BasicLibRandom.h:184:58: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                         ^
Libraries/BasicLib/BasicLibRandom.h:184:63: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                              ^
Libraries/BasicLib/BasicLibRandom.h:186:76: warning: code should be clang-formatted [-Wclang-format-violations]
    double minimum() { return m_generator.minimum() * m_range + m_offset; }
                                                                           ^
Libraries/BasicLib/BasicLibRandom.h:187:76: warning: code should be clang-formatted [-Wclang-format-violations]
    double maximum() { return m_generator.maximum() * m_range + m_offset; }
                                                                           ^
Libraries/BasicLib/BasicLibRandom.h:189:21: warning: code should be clang-formatted [-Wclang-format-violations]
    double generate( double p_range, double p_offset )
                    ^
Libraries/BasicLib/BasicLibRandom.h:189:53: warning: code should be clang-formatted [-Wclang-format-violations]
    double generate( double p_range, double p_offset )
                                                    ^
Libraries/BasicLib/BasicLibRandom.h:189:55: warning: code should be clang-formatted [-Wclang-format-violations]
    double generate( double p_range, double p_offset )
                                                      ^
Libraries/BasicLib/BasicLibRandom.h:190:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:191:51: warning: code should be clang-formatted [-Wclang-format-violations]
        return m_generator() * p_range + p_offset;
                                                  ^
Libraries/BasicLib/BasicLibRandom.h:192:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:194:24: warning: code should be clang-formatted [-Wclang-format-violations]
    double operator()()
                       ^
Libraries/BasicLib/BasicLibRandom.h:195:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:196:25: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( m_range, m_offset );
                        ^
Libraries/BasicLib/BasicLibRandom.h:196:43: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( m_range, m_offset );
                                          ^
Libraries/BasicLib/BasicLibRandom.h:196:46: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( m_range, m_offset );
                                             ^
Libraries/BasicLib/BasicLibRandom.h:197:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:199:23: warning: code should be clang-formatted [-Wclang-format-violations]
    double operator()( double a, double b )
                      ^
Libraries/BasicLib/BasicLibRandom.h:199:42: warning: code should be clang-formatted [-Wclang-format-violations]
    double operator()( double a, double b )
                                         ^
Libraries/BasicLib/BasicLibRandom.h:199:44: warning: code should be clang-formatted [-Wclang-format-violations]
    double operator()( double a, double b )
                                           ^
Libraries/BasicLib/BasicLibRandom.h:200:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:201:25: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( b - a, a );
                        ^
Libraries/BasicLib/BasicLibRandom.h:201:34: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( b - a, a );
                                 ^
Libraries/BasicLib/BasicLibRandom.h:201:37: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( b - a, a );
                                    ^
Libraries/BasicLib/BasicLibRandom.h:204:11: warning: code should be clang-formatted [-Wclang-format-violations]
protected:
          ^
Libraries/BasicLib/BasicLibRandom.h:205:27: warning: code should be clang-formatted [-Wclang-format-violations]
    generator m_generator;
                          ^
Libraries/BasicLib/BasicLibRandom.h:206:20: warning: code should be clang-formatted [-Wclang-format-violations]
    double m_range;
                   ^
Libraries/BasicLib/BasicLibRandom.h:207:21: warning: code should be clang-formatted [-Wclang-format-violations]
    double m_offset;
                    ^
Libraries/BasicLib/BasicLibRandom.h:209:3: warning: code should be clang-formatted [-Wclang-format-violations]
};
  ^
Libraries/BasicLib/BasicLibRandom.h:213:52: warning: code should be clang-formatted [-Wclang-format-violations]
typedef random_range<false> random_range_exclusive;
                                                   ^
Libraries/BasicLib/BasicLibRandom.h:224:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename generator = random_percent_exclusive >
        ^
Libraries/BasicLib/BasicLibRandom.h:224:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename generator = random_percent_exclusive >
         ^
Libraries/BasicLib/BasicLibRandom.h:224:56: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename generator = random_percent_exclusive >
                                                       ^
Libraries/BasicLib/BasicLibRandom.h:225:24: warning: code should be clang-formatted [-Wclang-format-violations]
struct random_int_range
                       ^
Libraries/BasicLib/BasicLibRandom.h:226:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibRandom.h:227:22: warning: code should be clang-formatted [-Wclang-format-violations]
    random_int_range( sint32 a = 0, sint32 b = 1 ) 
                     ^
Libraries/BasicLib/BasicLibRandom.h:227:49: warning: code should be clang-formatted [-Wclang-format-violations]
    random_int_range( sint32 a = 0, sint32 b = 1 ) 
                                                ^
Libraries/BasicLib/BasicLibRandom.h:227:51: warning: code should be clang-formatted [-Wclang-format-violations]
    random_int_range( sint32 a = 0, sint32 b = 1 ) 
                                                  ^
Libraries/BasicLib/BasicLibRandom.h:228:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:229:14: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
             ^
Libraries/BasicLib/BasicLibRandom.h:229:19: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                  ^
Libraries/BasicLib/BasicLibRandom.h:229:22: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                     ^
Libraries/BasicLib/BasicLibRandom.h:230:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:232:22: warning: code should be clang-formatted [-Wclang-format-violations]
    random_int_range( generator& p_generator, sint32 a = 0, sint32 b = 1 )
                     ^
Libraries/BasicLib/BasicLibRandom.h:232:32: warning: code should be clang-formatted [-Wclang-format-violations]
    random_int_range( generator& p_generator, sint32 a = 0, sint32 b = 1 )
                               ^
Libraries/BasicLib/BasicLibRandom.h:232:33: warning: code should be clang-formatted [-Wclang-format-violations]
    random_int_range( generator& p_generator, sint32 a = 0, sint32 b = 1 )
                                ^
Libraries/BasicLib/BasicLibRandom.h:232:73: warning: code should be clang-formatted [-Wclang-format-violations]
    random_int_range( generator& p_generator, sint32 a = 0, sint32 b = 1 )
                                                                        ^
Libraries/BasicLib/BasicLibRandom.h:232:75: warning: code should be clang-formatted [-Wclang-format-violations]
    random_int_range( generator& p_generator, sint32 a = 0, sint32 b = 1 )
                                                                          ^
Libraries/BasicLib/BasicLibRandom.h:233:23: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    
                      ^
Libraries/BasicLib/BasicLibRandom.h:233:35: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    
                                  ^
Libraries/BasicLib/BasicLibRandom.h:233:37: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    
                                    ^
Libraries/BasicLib/BasicLibRandom.h:234:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:235:14: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
             ^
Libraries/BasicLib/BasicLibRandom.h:235:19: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                  ^
Libraries/BasicLib/BasicLibRandom.h:235:22: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                     ^
Libraries/BasicLib/BasicLibRandom.h:236:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:238:15: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( sint32 a, sint32 b )
              ^
Libraries/BasicLib/BasicLibRandom.h:238:34: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( sint32 a, sint32 b )
                                 ^
Libraries/BasicLib/BasicLibRandom.h:238:36: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( sint32 a, sint32 b )
                                   ^
Libraries/BasicLib/BasicLibRandom.h:239:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:240:29: warning: code should be clang-formatted [-Wclang-format-violations]
        m_range = b - a + 1;
                            ^
Libraries/BasicLib/BasicLibRandom.h:241:22: warning: code should be clang-formatted [-Wclang-format-violations]
        m_offset = a;
                     ^
Libraries/BasicLib/BasicLibRandom.h:242:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:244:13: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
            ^
Libraries/BasicLib/BasicLibRandom.h:244:14: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
             ^
Libraries/BasicLib/BasicLibRandom.h:244:28: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
                           ^
Libraries/BasicLib/BasicLibRandom.h:244:30: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
                             ^
Libraries/BasicLib/BasicLibRandom.h:245:15: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
              ^
Libraries/BasicLib/BasicLibRandom.h:245:27: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                          ^
Libraries/BasicLib/BasicLibRandom.h:245:29: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                            ^
Libraries/BasicLib/BasicLibRandom.h:245:51: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                  ^
Libraries/BasicLib/BasicLibRandom.h:245:58: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                         ^
Libraries/BasicLib/BasicLibRandom.h:245:63: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                              ^
Libraries/BasicLib/BasicLibRandom.h:247:23: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 minimum() { return (sint32)(m_generator.minimum() * m_range) + m_offset; }
                      ^
Libraries/BasicLib/BasicLibRandom.h:247:84: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 minimum() { return (sint32)(m_generator.minimum() * m_range) + m_offset; }
                                                                                   ^
Libraries/BasicLib/BasicLibRandom.h:247:86: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 minimum() { return (sint32)(m_generator.minimum() * m_range) + m_offset; }
                                                                                     ^
Libraries/BasicLib/BasicLibRandom.h:248:23: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 maximum() { return (sint32)(m_generator.maximum() * m_range) + m_offset; }
                      ^
Libraries/BasicLib/BasicLibRandom.h:248:84: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 maximum() { return (sint32)(m_generator.maximum() * m_range) + m_offset; }
                                                                                   ^
Libraries/BasicLib/BasicLibRandom.h:248:86: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 maximum() { return (sint32)(m_generator.maximum() * m_range) + m_offset; }
                                                                                     ^
Libraries/BasicLib/BasicLibRandom.h:250:21: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 generate( sint32 p_range, sint32 p_offset )
                    ^
Libraries/BasicLib/BasicLibRandom.h:250:53: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 generate( sint32 p_range, sint32 p_offset )
                                                    ^
Libraries/BasicLib/BasicLibRandom.h:250:55: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 generate( sint32 p_range, sint32 p_offset )
                                                      ^
Libraries/BasicLib/BasicLibRandom.h:251:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:252:61: warning: code should be clang-formatted [-Wclang-format-violations]
        return (sint32)(m_generator() * p_range) + p_offset;
                                                            ^
Libraries/BasicLib/BasicLibRandom.h:253:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:255:24: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 operator()()
                       ^
Libraries/BasicLib/BasicLibRandom.h:256:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:257:25: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( m_range, m_offset );
                        ^
Libraries/BasicLib/BasicLibRandom.h:257:43: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( m_range, m_offset );
                                          ^
Libraries/BasicLib/BasicLibRandom.h:257:46: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( m_range, m_offset );
                                             ^
Libraries/BasicLib/BasicLibRandom.h:258:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:260:23: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 operator()( sint32 a, sint32 b )
                      ^
Libraries/BasicLib/BasicLibRandom.h:260:42: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 operator()( sint32 a, sint32 b )
                                         ^
Libraries/BasicLib/BasicLibRandom.h:260:44: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 operator()( sint32 a, sint32 b )
                                           ^
Libraries/BasicLib/BasicLibRandom.h:261:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:262:25: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( b - a + 1, a );
                        ^
Libraries/BasicLib/BasicLibRandom.h:262:38: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( b - a + 1, a );
                                     ^
Libraries/BasicLib/BasicLibRandom.h:262:41: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( b - a + 1, a );
                                        ^
Libraries/BasicLib/BasicLibRandom.h:265:11: warning: code should be clang-formatted [-Wclang-format-violations]
protected:
          ^
Libraries/BasicLib/BasicLibRandom.h:266:27: warning: code should be clang-formatted [-Wclang-format-violations]
    generator m_generator;
                          ^
Libraries/BasicLib/BasicLibRandom.h:267:20: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 m_range;
                   ^
Libraries/BasicLib/BasicLibRandom.h:268:21: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 m_offset;
                    ^
Libraries/BasicLib/BasicLibRandom.h:272:39: warning: code should be clang-formatted [-Wclang-format-violations]
typedef random_int_range<> random_int;
                                      ^
Libraries/BasicLib/BasicLibRandom.h:278:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< sint32 N = 4, typename generator = random_int >
        ^
Libraries/BasicLib/BasicLibRandom.h:278:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< sint32 N = 4, typename generator = random_int >
         ^
Libraries/BasicLib/BasicLibRandom.h:278:56: warning: code should be clang-formatted [-Wclang-format-violations]
template< sint32 N = 4, typename generator = random_int >
                                                       ^
Libraries/BasicLib/BasicLibRandom.h:279:26: warning: code should be clang-formatted [-Wclang-format-violations]
struct simulated_binomial
                         ^
Libraries/BasicLib/BasicLibRandom.h:280:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibRandom.h:281:24: warning: code should be clang-formatted [-Wclang-format-violations]
    simulated_binomial( sint32 a = 0, sint32 b = 1 ) 
                       ^
Libraries/BasicLib/BasicLibRandom.h:281:51: warning: code should be clang-formatted [-Wclang-format-violations]
    simulated_binomial( sint32 a = 0, sint32 b = 1 ) 
                                                  ^
Libraries/BasicLib/BasicLibRandom.h:281:53: warning: code should be clang-formatted [-Wclang-format-violations]
    simulated_binomial( sint32 a = 0, sint32 b = 1 ) 
                                                    ^
Libraries/BasicLib/BasicLibRandom.h:282:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:283:14: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
             ^
Libraries/BasicLib/BasicLibRandom.h:283:19: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                  ^
Libraries/BasicLib/BasicLibRandom.h:283:22: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                     ^
Libraries/BasicLib/BasicLibRandom.h:284:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:286:24: warning: code should be clang-formatted [-Wclang-format-violations]
    simulated_binomial( generator& p_generator, sint32 a = 0, sint32 b = 1 )
                       ^
Libraries/BasicLib/BasicLibRandom.h:286:34: warning: code should be clang-formatted [-Wclang-format-violations]
    simulated_binomial( generator& p_generator, sint32 a = 0, sint32 b = 1 )
                                 ^
Libraries/BasicLib/BasicLibRandom.h:286:35: warning: code should be clang-formatted [-Wclang-format-violations]
    simulated_binomial( generator& p_generator, sint32 a = 0, sint32 b = 1 )
                                  ^
Libraries/BasicLib/BasicLibRandom.h:286:75: warning: code should be clang-formatted [-Wclang-format-violations]
    simulated_binomial( generator& p_generator, sint32 a = 0, sint32 b = 1 )
                                                                          ^
Libraries/BasicLib/BasicLibRandom.h:286:77: warning: code should be clang-formatted [-Wclang-format-violations]
    simulated_binomial( generator& p_generator, sint32 a = 0, sint32 b = 1 )
                                                                            ^
Libraries/BasicLib/BasicLibRandom.h:287:23: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    
                      ^
Libraries/BasicLib/BasicLibRandom.h:287:35: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    
                                  ^
Libraries/BasicLib/BasicLibRandom.h:287:37: warning: code should be clang-formatted [-Wclang-format-violations]
        : m_generator( p_generator )    
                                    ^
Libraries/BasicLib/BasicLibRandom.h:288:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:289:14: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
             ^
Libraries/BasicLib/BasicLibRandom.h:289:19: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                  ^
Libraries/BasicLib/BasicLibRandom.h:289:22: warning: code should be clang-formatted [-Wclang-format-violations]
        init( a, b );
                     ^
Libraries/BasicLib/BasicLibRandom.h:290:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:292:15: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( sint32 a, sint32 b )
              ^
Libraries/BasicLib/BasicLibRandom.h:292:34: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( sint32 a, sint32 b )
                                 ^
Libraries/BasicLib/BasicLibRandom.h:292:36: warning: code should be clang-formatted [-Wclang-format-violations]
    void init( sint32 a, sint32 b )
                                   ^
Libraries/BasicLib/BasicLibRandom.h:293:6: warning: code should be clang-formatted [-Wclang-format-violations]
    { 
     ^
Libraries/BasicLib/BasicLibRandom.h:294:25: warning: code should be clang-formatted [-Wclang-format-violations]
        m_range = b - a;
                        ^
Libraries/BasicLib/BasicLibRandom.h:295:22: warning: code should be clang-formatted [-Wclang-format-violations]
        m_offset = a;
                     ^
Libraries/BasicLib/BasicLibRandom.h:296:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:298:13: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
            ^
Libraries/BasicLib/BasicLibRandom.h:298:14: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
             ^
Libraries/BasicLib/BasicLibRandom.h:298:28: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
                           ^
Libraries/BasicLib/BasicLibRandom.h:298:30: warning: code should be clang-formatted [-Wclang-format-violations]
    template< typename type >
                             ^
Libraries/BasicLib/BasicLibRandom.h:299:15: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
              ^
Libraries/BasicLib/BasicLibRandom.h:299:27: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                          ^
Libraries/BasicLib/BasicLibRandom.h:299:29: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                            ^
Libraries/BasicLib/BasicLibRandom.h:299:51: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                  ^
Libraries/BasicLib/BasicLibRandom.h:299:58: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                         ^
Libraries/BasicLib/BasicLibRandom.h:299:63: warning: code should be clang-formatted [-Wclang-format-violations]
    void seed( type p_seed )   { m_generator.seed( p_seed ); }
                                                              ^
Libraries/BasicLib/BasicLibRandom.h:301:42: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 minimum() { return m_offset; }
                                         ^
Libraries/BasicLib/BasicLibRandom.h:302:52: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 maximum() { return m_range + m_offset; }
                                                   ^
Libraries/BasicLib/BasicLibRandom.h:304:21: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 generate( sint32 p_range, sint32 p_offset )
                    ^
Libraries/BasicLib/BasicLibRandom.h:304:53: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 generate( sint32 p_range, sint32 p_offset )
                                                    ^
Libraries/BasicLib/BasicLibRandom.h:304:55: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 generate( sint32 p_range, sint32 p_offset )
                                                      ^
Libraries/BasicLib/BasicLibRandom.h:305:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:306:41: warning: code should be clang-formatted [-Wclang-format-violations]
        sint32 minorrange = p_range / N;
                                        ^
Libraries/BasicLib/BasicLibRandom.h:307:34: warning: code should be clang-formatted [-Wclang-format-violations]
        sint32 mod = p_range % N;
                                 ^
Libraries/BasicLib/BasicLibRandom.h:309:24: warning: code should be clang-formatted [-Wclang-format-violations]
        sint32 sum = 0;
                       ^
Libraries/BasicLib/BasicLibRandom.h:311:12: warning: code should be clang-formatted [-Wclang-format-violations]
        for( int i = 0; i < N; i++ )
           ^
Libraries/BasicLib/BasicLibRandom.h:311:13: warning: code should be clang-formatted [-Wclang-format-violations]
        for( int i = 0; i < N; i++ )
            ^
Libraries/BasicLib/BasicLibRandom.h:311:35: warning: code should be clang-formatted [-Wclang-format-violations]
        for( int i = 0; i < N; i++ )
                                  ^
Libraries/BasicLib/BasicLibRandom.h:311:37: warning: code should be clang-formatted [-Wclang-format-violations]
        for( int i = 0; i < N; i++ )
                                    ^
Libraries/BasicLib/BasicLibRandom.h:312:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibRandom.h:313:15: warning: code should be clang-formatted [-Wclang-format-violations]
            if( mod > i )   // add 1 to the first range%N ranges, in case
              ^
Libraries/BasicLib/BasicLibRandom.h:313:16: warning: code should be clang-formatted [-Wclang-format-violations]
            if( mod > i )   // add 1 to the first range%N ranges, in case
               ^
Libraries/BasicLib/BasicLibRandom.h:313:24: warning: code should be clang-formatted [-Wclang-format-violations]
            if( mod > i )   // add 1 to the first range%N ranges, in case
                       ^
Libraries/BasicLib/BasicLibRandom.h:313:26: warning: code should be clang-formatted [-Wclang-format-violations]
            if( mod > i )   // add 1 to the first range%N ranges, in case
                         ^
Libraries/BasicLib/BasicLibRandom.h:313:74: warning: code should be clang-formatted [-Wclang-format-violations]
            if( mod > i )   // add 1 to the first range%N ranges, in case
                                                                         ^
Libraries/BasicLib/BasicLibRandom.h:314:62: warning: code should be clang-formatted [-Wclang-format-violations]
                            // the range isn't divisible by N
                                                             ^
Libraries/BasicLib/BasicLibRandom.h:315:36: warning: code should be clang-formatted [-Wclang-format-violations]
                sum += m_generator( 0, minorrange + 1 );
                                   ^
Libraries/BasicLib/BasicLibRandom.h:315:54: warning: code should be clang-formatted [-Wclang-format-violations]
                sum += m_generator( 0, minorrange + 1 );
                                                     ^
Libraries/BasicLib/BasicLibRandom.h:315:57: warning: code should be clang-formatted [-Wclang-format-violations]
                sum += m_generator( 0, minorrange + 1 );
                                                        ^
Libraries/BasicLib/BasicLibRandom.h:316:17: warning: code should be clang-formatted [-Wclang-format-violations]
            else
                ^
Libraries/BasicLib/BasicLibRandom.h:317:36: warning: code should be clang-formatted [-Wclang-format-violations]
                sum += m_generator( 0, minorrange );
                                   ^
Libraries/BasicLib/BasicLibRandom.h:317:50: warning: code should be clang-formatted [-Wclang-format-violations]
                sum += m_generator( 0, minorrange );
                                                 ^
Libraries/BasicLib/BasicLibRandom.h:317:53: warning: code should be clang-formatted [-Wclang-format-violations]
                sum += m_generator( 0, minorrange );
                                                    ^
Libraries/BasicLib/BasicLibRandom.h:318:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibRandom.h:320:31: warning: code should be clang-formatted [-Wclang-format-violations]
        return sum + p_offset;
                              ^
Libraries/BasicLib/BasicLibRandom.h:321:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:323:24: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 operator()()
                       ^
Libraries/BasicLib/BasicLibRandom.h:324:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:325:25: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( m_range, m_offset );
                        ^
Libraries/BasicLib/BasicLibRandom.h:325:43: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( m_range, m_offset );
                                          ^
Libraries/BasicLib/BasicLibRandom.h:325:46: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( m_range, m_offset );
                                             ^
Libraries/BasicLib/BasicLibRandom.h:326:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibRandom.h:328:23: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 operator()( sint32 a, sint32 b )
                      ^
Libraries/BasicLib/BasicLibRandom.h:328:42: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 operator()( sint32 a, sint32 b )
                                         ^
Libraries/BasicLib/BasicLibRandom.h:328:44: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 operator()( sint32 a, sint32 b )
                                           ^
Libraries/BasicLib/BasicLibRandom.h:329:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibRandom.h:330:25: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( b - a, a );
                        ^
Libraries/BasicLib/BasicLibRandom.h:330:34: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( b - a, a );
                                 ^
Libraries/BasicLib/BasicLibRandom.h:330:37: warning: code should be clang-formatted [-Wclang-format-violations]
        return generate( b - a, a );
                                    ^
Libraries/BasicLib/BasicLibRandom.h:333:11: warning: code should be clang-formatted [-Wclang-format-violations]
protected:
          ^
Libraries/BasicLib/BasicLibRandom.h:334:27: warning: code should be clang-formatted [-Wclang-format-violations]
    generator m_generator;
                          ^
Libraries/BasicLib/BasicLibRandom.h:335:20: warning: code should be clang-formatted [-Wclang-format-violations]
    sint32 m_range;
                   ^
Libraries/BasicLib/BasicLibRandom.h:337:3: warning: code should be clang-formatted [-Wclang-format-violations]
};
  ^
Libraries/BasicLib/BasicLibRandom.h:340:46: warning: code should be clang-formatted [-Wclang-format-violations]
typedef simulated_binomial<> random_binomial;
                                             ^
Libraries/BasicLib/BasicLibRandom.h:353:40: warning: code should be clang-formatted [-Wclang-format-violations]
extern random_binomial RandomIntNormal;
                                       ^
Libraries/BasicLib/BasicLibRandom.h:356:28: warning: code should be clang-formatted [-Wclang-format-violations]
} // end namespace BasicLib
                           ^
Libraries/BasicLib/BasicLibRandom.h:359:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
Libraries/BasicLib/BasicLibString.h:5:31: warning: code should be clang-formatted [-Wclang-format-violations]
//                    library.
                              ^
Libraries/BasicLib/BasicLibString.h:11:1: warning: code should be clang-formatted [-Wclang-format-violations]
#include <string>
^
Libraries/BasicLib/BasicLibString.h:16:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibString.h:17:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibString.h:24:64: warning: code should be clang-formatted [-Wclang-format-violations]
// These functions get a time value. The Actual meaning of this 
                                                               ^
Libraries/BasicLib/BasicLibString.h:27:23: warning: code should be clang-formatted [-Wclang-format-violations]
std::string UpperCase( const std::string& p_string );
                      ^
Libraries/BasicLib/BasicLibString.h:27:41: warning: code should be clang-formatted [-Wclang-format-violations]
std::string UpperCase( const std::string& p_string );
                                        ^
Libraries/BasicLib/BasicLibString.h:27:42: warning: code should be clang-formatted [-Wclang-format-violations]
std::string UpperCase( const std::string& p_string );
                                         ^
Libraries/BasicLib/BasicLibString.h:27:51: warning: code should be clang-formatted [-Wclang-format-violations]
std::string UpperCase( const std::string& p_string );
                                                  ^
Libraries/BasicLib/BasicLibString.h:28:23: warning: code should be clang-formatted [-Wclang-format-violations]
std::string LowerCase( const std::string& p_string );
                      ^
Libraries/BasicLib/BasicLibString.h:28:41: warning: code should be clang-formatted [-Wclang-format-violations]
std::string LowerCase( const std::string& p_string );
                                        ^
Libraries/BasicLib/BasicLibString.h:28:42: warning: code should be clang-formatted [-Wclang-format-violations]
std::string LowerCase( const std::string& p_string );
                                         ^
Libraries/BasicLib/BasicLibString.h:28:51: warning: code should be clang-formatted [-Wclang-format-violations]
std::string LowerCase( const std::string& p_string );
                                                  ^
Libraries/BasicLib/BasicLibString.h:28:54: warning: code should be clang-formatted [-Wclang-format-violations]
std::string LowerCase( const std::string& p_string );
                                                     ^
Libraries/BasicLib/BasicLibString.h:31:30: warning: code should be clang-formatted [-Wclang-format-violations]
std::string SearchAndReplace( 
                             ^
Libraries/BasicLib/BasicLibString.h:32:22: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_target,
                     ^
Libraries/BasicLib/BasicLibString.h:32:23: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_target,
                      ^
Libraries/BasicLib/BasicLibString.h:32:33: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_target,
                                ^
Libraries/BasicLib/BasicLibString.h:33:22: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_search,
                     ^
Libraries/BasicLib/BasicLibString.h:33:23: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_search,
                      ^
Libraries/BasicLib/BasicLibString.h:33:33: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_search,
                                ^
Libraries/BasicLib/BasicLibString.h:34:22: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_replace );
                     ^
Libraries/BasicLib/BasicLibString.h:34:23: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_replace );
                      ^
Libraries/BasicLib/BasicLibString.h:34:33: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_replace );
                                ^
Libraries/BasicLib/BasicLibString.h:34:36: warning: code should be clang-formatted [-Wclang-format-violations]
    const std::string& p_replace );
                                   ^
Libraries/BasicLib/BasicLibString.h:39:28: warning: code should be clang-formatted [-Wclang-format-violations]
std::string TrimWhitespace( const std::string& p_string );
                           ^
Libraries/BasicLib/BasicLibString.h:39:46: warning: code should be clang-formatted [-Wclang-format-violations]
std::string TrimWhitespace( const std::string& p_string );
                                             ^
Libraries/BasicLib/BasicLibString.h:39:47: warning: code should be clang-formatted [-Wclang-format-violations]
std::string TrimWhitespace( const std::string& p_string );
                                              ^
Libraries/BasicLib/BasicLibString.h:39:56: warning: code should be clang-formatted [-Wclang-format-violations]
std::string TrimWhitespace( const std::string& p_string );
                                                       ^
Libraries/BasicLib/BasicLibString.h:40:23: warning: code should be clang-formatted [-Wclang-format-violations]
std::string ParseWord( const std::string& p_string, int p_index );
                      ^
Libraries/BasicLib/BasicLibString.h:40:41: warning: code should be clang-formatted [-Wclang-format-violations]
std::string ParseWord( const std::string& p_string, int p_index );
                                        ^
Libraries/BasicLib/BasicLibString.h:40:42: warning: code should be clang-formatted [-Wclang-format-violations]
std::string ParseWord( const std::string& p_string, int p_index );
                                         ^
Libraries/BasicLib/BasicLibString.h:40:64: warning: code should be clang-formatted [-Wclang-format-violations]
std::string ParseWord( const std::string& p_string, int p_index );
                                                               ^
Libraries/BasicLib/BasicLibString.h:41:24: warning: code should be clang-formatted [-Wclang-format-violations]
std::string RemoveWord( const std::string& p_string, int p_index );
                       ^
Libraries/BasicLib/BasicLibString.h:41:42: warning: code should be clang-formatted [-Wclang-format-violations]
std::string RemoveWord( const std::string& p_string, int p_index );
                                         ^
Libraries/BasicLib/BasicLibString.h:41:43: warning: code should be clang-formatted [-Wclang-format-violations]
std::string RemoveWord( const std::string& p_string, int p_index );
                                          ^
Libraries/BasicLib/BasicLibString.h:41:65: warning: code should be clang-formatted [-Wclang-format-violations]
std::string RemoveWord( const std::string& p_string, int p_index );
                                                                ^
Libraries/BasicLib/BasicLibString.h:41:68: warning: code should be clang-formatted [-Wclang-format-violations]
std::string RemoveWord( const std::string& p_string, int p_index );
                                                                   ^
Libraries/BasicLib/BasicLibString.h:49:64: warning: code should be clang-formatted [-Wclang-format-violations]
// ============================================================
                                                               ^
Libraries/BasicLib/BasicLibString.h:52:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
        ^
Libraries/BasicLib/BasicLibString.h:52:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
         ^
Libraries/BasicLib/BasicLibString.h:52:24: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
                       ^
Libraries/BasicLib/BasicLibString.h:52:26: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
                         ^
Libraries/BasicLib/BasicLibString.h:53:20: warning: code should be clang-formatted [-Wclang-format-violations]
inline void insert( std::ostream& s, const type& t )  {  s << t; }
                   ^
Libraries/BasicLib/BasicLibString.h:53:33: warning: code should be clang-formatted [-Wclang-format-violations]
inline void insert( std::ostream& s, const type& t )  {  s << t; }
                                ^
Libraries/BasicLib/BasicLibString.h:53:34: warning: code should be clang-formatted [-Wclang-format-violations]
inline void insert( std::ostream& s, const type& t )  {  s << t; }
                                 ^
Libraries/BasicLib/BasicLibString.h:53:48: warning: code should be clang-formatted [-Wclang-format-violations]
inline void insert( std::ostream& s, const type& t )  {  s << t; }
                                               ^
Libraries/BasicLib/BasicLibString.h:53:49: warning: code should be clang-formatted [-Wclang-format-violations]
inline void insert( std::ostream& s, const type& t )  {  s << t; }
                                                ^
Libraries/BasicLib/BasicLibString.h:53:51: warning: code should be clang-formatted [-Wclang-format-violations]
inline void insert( std::ostream& s, const type& t )  {  s << t; }
                                                  ^
Libraries/BasicLib/BasicLibString.h:53:53: warning: code should be clang-formatted [-Wclang-format-violations]
inline void insert( std::ostream& s, const type& t )  {  s << t; }
                                                    ^
Libraries/BasicLib/BasicLibString.h:53:56: warning: code should be clang-formatted [-Wclang-format-violations]
inline void insert( std::ostream& s, const type& t )  {  s << t; }
                                                       ^
Libraries/BasicLib/BasicLibString.h:53:65: warning: code should be clang-formatted [-Wclang-format-violations]
inline void insert( std::ostream& s, const type& t )  {  s << t; }
                                                                ^
Libraries/BasicLib/BasicLibString.h:54:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
        ^
Libraries/BasicLib/BasicLibString.h:54:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
         ^
Libraries/BasicLib/BasicLibString.h:54:24: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
                       ^
Libraries/BasicLib/BasicLibString.h:54:26: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
                         ^
Libraries/BasicLib/BasicLibString.h:55:12: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
           ^
Libraries/BasicLib/BasicLibString.h:55:13: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
            ^
Libraries/BasicLib/BasicLibString.h:55:22: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                     ^
Libraries/BasicLib/BasicLibString.h:55:35: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                                  ^
Libraries/BasicLib/BasicLibString.h:55:36: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                                   ^
Libraries/BasicLib/BasicLibString.h:55:44: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                                           ^
Libraries/BasicLib/BasicLibString.h:55:45: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                                            ^
Libraries/BasicLib/BasicLibString.h:55:47: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                                              ^
Libraries/BasicLib/BasicLibString.h:55:49: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                                                ^
Libraries/BasicLib/BasicLibString.h:55:52: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                                                   ^
Libraries/BasicLib/BasicLibString.h:55:61: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                                                            ^
Libraries/BasicLib/BasicLibString.h:55:71: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                                                                      ^
Libraries/BasicLib/BasicLibString.h:55:73: warning: code should be clang-formatted [-Wclang-format-violations]
inline type& extract( std::istream& s, type& t )  {  s >> t; return t; }
                                                                        ^
Libraries/BasicLib/BasicLibString.h:61:22: warning: code should be clang-formatted [-Wclang-format-violations]
#ifdef CRAPPYCOMPILER
                     ^
Libraries/BasicLib/BasicLibString.h:63:13: warning: code should be clang-formatted [-Wclang-format-violations]
    template<>
            ^
Libraries/BasicLib/BasicLibString.h:63:15: warning: code should be clang-formatted [-Wclang-format-violations]
    template<>
              ^
Libraries/BasicLib/BasicLibString.h:64:32: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<sint64>( std::ostream& s, const sint64& n )
                               ^
Libraries/BasicLib/BasicLibString.h:64:45: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<sint64>( std::ostream& s, const sint64& n )
                                            ^
Libraries/BasicLib/BasicLibString.h:64:46: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<sint64>( std::ostream& s, const sint64& n )
                                             ^
Libraries/BasicLib/BasicLibString.h:64:62: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<sint64>( std::ostream& s, const sint64& n )
                                                             ^
Libraries/BasicLib/BasicLibString.h:64:63: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<sint64>( std::ostream& s, const sint64& n )
                                                              ^
Libraries/BasicLib/BasicLibString.h:64:65: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<sint64>( std::ostream& s, const sint64& n )
                                                                ^
Libraries/BasicLib/BasicLibString.h:64:67: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<sint64>( std::ostream& s, const sint64& n )
                                                                  ^
Libraries/BasicLib/BasicLibString.h:65:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.h:66:50: warning: code should be clang-formatted [-Wclang-format-violations]
        char digits[21] = "01234567890123456789";
                                                 ^
Libraries/BasicLib/BasicLibString.h:67:22: warning: code should be clang-formatted [-Wclang-format-violations]
        s << _i64toa( n, digits, 10 );
                     ^
Libraries/BasicLib/BasicLibString.h:67:36: warning: code should be clang-formatted [-Wclang-format-violations]
        s << _i64toa( n, digits, 10 );
                                   ^
Libraries/BasicLib/BasicLibString.h:67:39: warning: code should be clang-formatted [-Wclang-format-violations]
        s << _i64toa( n, digits, 10 );
                                      ^
Libraries/BasicLib/BasicLibString.h:68:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.h:70:13: warning: code should be clang-formatted [-Wclang-format-violations]
    template<>
            ^
Libraries/BasicLib/BasicLibString.h:70:15: warning: code should be clang-formatted [-Wclang-format-violations]
    template<>
              ^
Libraries/BasicLib/BasicLibString.h:71:32: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<uint64>( std::ostream& s, const uint64& n )
                               ^
Libraries/BasicLib/BasicLibString.h:71:45: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<uint64>( std::ostream& s, const uint64& n )
                                            ^
Libraries/BasicLib/BasicLibString.h:71:46: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<uint64>( std::ostream& s, const uint64& n )
                                             ^
Libraries/BasicLib/BasicLibString.h:71:62: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<uint64>( std::ostream& s, const uint64& n )
                                                             ^
Libraries/BasicLib/BasicLibString.h:71:63: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<uint64>( std::ostream& s, const uint64& n )
                                                              ^
Libraries/BasicLib/BasicLibString.h:71:65: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<uint64>( std::ostream& s, const uint64& n )
                                                                ^
Libraries/BasicLib/BasicLibString.h:71:67: warning: code should be clang-formatted [-Wclang-format-violations]
    inline void insert<uint64>( std::ostream& s, const uint64& n )
                                                                  ^
Libraries/BasicLib/BasicLibString.h:72:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.h:73:50: warning: code should be clang-formatted [-Wclang-format-violations]
        char digits[21] = "01234567890123456789";
                                                 ^
Libraries/BasicLib/BasicLibString.h:74:23: warning: code should be clang-formatted [-Wclang-format-violations]
        s << _ui64toa( n, digits, 10 );
                      ^
Libraries/BasicLib/BasicLibString.h:74:37: warning: code should be clang-formatted [-Wclang-format-violations]
        s << _ui64toa( n, digits, 10 );
                                    ^
Libraries/BasicLib/BasicLibString.h:74:40: warning: code should be clang-formatted [-Wclang-format-violations]
        s << _ui64toa( n, digits, 10 );
                                       ^
Libraries/BasicLib/BasicLibString.h:75:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.h:77:13: warning: code should be clang-formatted [-Wclang-format-violations]
    template<>
            ^
Libraries/BasicLib/BasicLibString.h:77:15: warning: code should be clang-formatted [-Wclang-format-violations]
    template<>
              ^
Libraries/BasicLib/BasicLibString.h:78:18: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64& extract<sint64>( std::istream& s, sint64& n )
                 ^
Libraries/BasicLib/BasicLibString.h:78:19: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64& extract<sint64>( std::istream& s, sint64& n )
                  ^
Libraries/BasicLib/BasicLibString.h:78:36: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64& extract<sint64>( std::istream& s, sint64& n )
                                   ^
Libraries/BasicLib/BasicLibString.h:78:49: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64& extract<sint64>( std::istream& s, sint64& n )
                                                ^
Libraries/BasicLib/BasicLibString.h:78:50: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64& extract<sint64>( std::istream& s, sint64& n )
                                                 ^
Libraries/BasicLib/BasicLibString.h:78:60: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64& extract<sint64>( std::istream& s, sint64& n )
                                                           ^
Libraries/BasicLib/BasicLibString.h:78:61: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64& extract<sint64>( std::istream& s, sint64& n )
                                                            ^
Libraries/BasicLib/BasicLibString.h:78:63: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64& extract<sint64>( std::istream& s, sint64& n )
                                                              ^
Libraries/BasicLib/BasicLibString.h:78:65: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64& extract<sint64>( std::istream& s, sint64& n )
                                                                ^
Libraries/BasicLib/BasicLibString.h:79:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.h:80:37: warning: code should be clang-formatted [-Wclang-format-violations]
        // skip whitespace if needed
                                    ^
Libraries/BasicLib/BasicLibString.h:81:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.flags() & std::ios::skipws )
          ^
Libraries/BasicLib/BasicLibString.h:81:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.flags() & std::ios::skipws )
           ^
Libraries/BasicLib/BasicLibString.h:81:41: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.flags() & std::ios::skipws )
                                        ^
Libraries/BasicLib/BasicLibString.h:81:43: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.flags() & std::ios::skipws )
                                          ^
Libraries/BasicLib/BasicLibString.h:82:26: warning: code should be clang-formatted [-Wclang-format-violations]
            s >> std::ws;
                         ^
Libraries/BasicLib/BasicLibString.h:84:71: warning: code should be clang-formatted [-Wclang-format-violations]
        // make sure that the number exists, or else it's a read error
                                                                      ^
Libraries/BasicLib/BasicLibString.h:85:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.peek() != '-' && !isdigit( s.peek() ) )
          ^
Libraries/BasicLib/BasicLibString.h:85:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.peek() != '-' && !isdigit( s.peek() ) )
           ^
Libraries/BasicLib/BasicLibString.h:85:41: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.peek() != '-' && !isdigit( s.peek() ) )
                                        ^
Libraries/BasicLib/BasicLibString.h:85:50: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.peek() != '-' && !isdigit( s.peek() ) )
                                                 ^
Libraries/BasicLib/BasicLibString.h:85:52: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.peek() != '-' && !isdigit( s.peek() ) )
                                                   ^
Libraries/BasicLib/BasicLibString.h:85:54: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.peek() != '-' && !isdigit( s.peek() ) )
                                                     ^
Libraries/BasicLib/BasicLibString.h:86:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibString.h:87:24: warning: code should be clang-formatted [-Wclang-format-violations]
            s.setstate( s.failbit );
                       ^
Libraries/BasicLib/BasicLibString.h:87:34: warning: code should be clang-formatted [-Wclang-format-violations]
            s.setstate( s.failbit );
                                 ^
Libraries/BasicLib/BasicLibString.h:87:37: warning: code should be clang-formatted [-Wclang-format-violations]
            s.setstate( s.failbit );
                                    ^
Libraries/BasicLib/BasicLibString.h:88:22: warning: code should be clang-formatted [-Wclang-format-violations]
            return n;
                     ^
Libraries/BasicLib/BasicLibString.h:89:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibString.h:92:25: warning: code should be clang-formatted [-Wclang-format-violations]
        std::string str;
                        ^
Libraries/BasicLib/BasicLibString.h:93:16: warning: code should be clang-formatted [-Wclang-format-violations]
        char c;
               ^
Libraries/BasicLib/BasicLibString.h:95:42: warning: code should be clang-formatted [-Wclang-format-violations]
        // read in the minus if it exists
                                         ^
Libraries/BasicLib/BasicLibString.h:96:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.peek() == '-' )
          ^
Libraries/BasicLib/BasicLibString.h:96:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.peek() == '-' )
           ^
Libraries/BasicLib/BasicLibString.h:96:28: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.peek() == '-' )
                           ^
Libraries/BasicLib/BasicLibString.h:96:30: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.peek() == '-' )
                             ^
Libraries/BasicLib/BasicLibString.h:97:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibString.h:98:20: warning: code should be clang-formatted [-Wclang-format-violations]
            s >> c;
                   ^
Libraries/BasicLib/BasicLibString.h:99:22: warning: code should be clang-formatted [-Wclang-format-violations]
            str += c;
                     ^
Libraries/BasicLib/BasicLibString.h:100:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibString.h:102:35: warning: code should be clang-formatted [-Wclang-format-violations]
        // continue reading digits
                                  ^
Libraries/BasicLib/BasicLibString.h:103:14: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
             ^
Libraries/BasicLib/BasicLibString.h:103:15: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
              ^
Libraries/BasicLib/BasicLibString.h:103:24: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
                       ^
Libraries/BasicLib/BasicLibString.h:103:33: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
                                ^
Libraries/BasicLib/BasicLibString.h:103:35: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
                                  ^
Libraries/BasicLib/BasicLibString.h:103:37: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
                                    ^
Libraries/BasicLib/BasicLibString.h:104:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibString.h:105:20: warning: code should be clang-formatted [-Wclang-format-violations]
            s >> c;
                   ^
Libraries/BasicLib/BasicLibString.h:106:22: warning: code should be clang-formatted [-Wclang-format-violations]
            str += c;
                     ^
Libraries/BasicLib/BasicLibString.h:107:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibString.h:109:21: warning: code should be clang-formatted [-Wclang-format-violations]
        n = _atoi64( str.c_str() );
                    ^
Libraries/BasicLib/BasicLibString.h:109:33: warning: code should be clang-formatted [-Wclang-format-violations]
        n = _atoi64( str.c_str() );
                                ^
Libraries/BasicLib/BasicLibString.h:109:36: warning: code should be clang-formatted [-Wclang-format-violations]
        n = _atoi64( str.c_str() );
                                   ^
Libraries/BasicLib/BasicLibString.h:111:18: warning: code should be clang-formatted [-Wclang-format-violations]
        return n;
                 ^
Libraries/BasicLib/BasicLibString.h:112:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.h:116:13: warning: code should be clang-formatted [-Wclang-format-violations]
    template<>
            ^
Libraries/BasicLib/BasicLibString.h:116:15: warning: code should be clang-formatted [-Wclang-format-violations]
    template<>
              ^
Libraries/BasicLib/BasicLibString.h:117:18: warning: code should be clang-formatted [-Wclang-format-violations]
    inline uint64& extract<uint64>( std::istream& s, uint64& n )
                 ^
Libraries/BasicLib/BasicLibString.h:117:19: warning: code should be clang-formatted [-Wclang-format-violations]
    inline uint64& extract<uint64>( std::istream& s, uint64& n )
                  ^
Libraries/BasicLib/BasicLibString.h:117:36: warning: code should be clang-formatted [-Wclang-format-violations]
    inline uint64& extract<uint64>( std::istream& s, uint64& n )
                                   ^
Libraries/BasicLib/BasicLibString.h:117:49: warning: code should be clang-formatted [-Wclang-format-violations]
    inline uint64& extract<uint64>( std::istream& s, uint64& n )
                                                ^
Libraries/BasicLib/BasicLibString.h:117:50: warning: code should be clang-formatted [-Wclang-format-violations]
    inline uint64& extract<uint64>( std::istream& s, uint64& n )
                                                 ^
Libraries/BasicLib/BasicLibString.h:117:60: warning: code should be clang-formatted [-Wclang-format-violations]
    inline uint64& extract<uint64>( std::istream& s, uint64& n )
                                                           ^
Libraries/BasicLib/BasicLibString.h:117:61: warning: code should be clang-formatted [-Wclang-format-violations]
    inline uint64& extract<uint64>( std::istream& s, uint64& n )
                                                            ^
Libraries/BasicLib/BasicLibString.h:117:63: warning: code should be clang-formatted [-Wclang-format-violations]
    inline uint64& extract<uint64>( std::istream& s, uint64& n )
                                                              ^
Libraries/BasicLib/BasicLibString.h:117:65: warning: code should be clang-formatted [-Wclang-format-violations]
    inline uint64& extract<uint64>( std::istream& s, uint64& n )
                                                                ^
Libraries/BasicLib/BasicLibString.h:118:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibString.h:119:37: warning: code should be clang-formatted [-Wclang-format-violations]
        // skip whitespace if needed
                                    ^
Libraries/BasicLib/BasicLibString.h:120:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.flags() & std::ios::skipws )
          ^
Libraries/BasicLib/BasicLibString.h:120:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.flags() & std::ios::skipws )
           ^
Libraries/BasicLib/BasicLibString.h:120:41: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.flags() & std::ios::skipws )
                                        ^
Libraries/BasicLib/BasicLibString.h:120:43: warning: code should be clang-formatted [-Wclang-format-violations]
        if( s.flags() & std::ios::skipws )
                                          ^
Libraries/BasicLib/BasicLibString.h:121:26: warning: code should be clang-formatted [-Wclang-format-violations]
            s >> std::ws;
                         ^
Libraries/BasicLib/BasicLibString.h:123:71: warning: code should be clang-formatted [-Wclang-format-violations]
        // make sure that the number exists, or else it's a read error
                                                                      ^
Libraries/BasicLib/BasicLibString.h:124:11: warning: code should be clang-formatted [-Wclang-format-violations]
        if( !isdigit( s.peek() ) )
          ^
Libraries/BasicLib/BasicLibString.h:124:12: warning: code should be clang-formatted [-Wclang-format-violations]
        if( !isdigit( s.peek() ) )
           ^
Libraries/BasicLib/BasicLibString.h:124:22: warning: code should be clang-formatted [-Wclang-format-violations]
        if( !isdigit( s.peek() ) )
                     ^
Libraries/BasicLib/BasicLibString.h:124:31: warning: code should be clang-formatted [-Wclang-format-violations]
        if( !isdigit( s.peek() ) )
                              ^
Libraries/BasicLib/BasicLibString.h:124:33: warning: code should be clang-formatted [-Wclang-format-violations]
        if( !isdigit( s.peek() ) )
                                ^
Libraries/BasicLib/BasicLibString.h:124:35: warning: code should be clang-formatted [-Wclang-format-violations]
        if( !isdigit( s.peek() ) )
                                  ^
Libraries/BasicLib/BasicLibString.h:125:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibString.h:126:24: warning: code should be clang-formatted [-Wclang-format-violations]
            s.setstate( s.failbit );
                       ^
Libraries/BasicLib/BasicLibString.h:126:34: warning: code should be clang-formatted [-Wclang-format-violations]
            s.setstate( s.failbit );
                                 ^
Libraries/BasicLib/BasicLibString.h:126:37: warning: code should be clang-formatted [-Wclang-format-violations]
            s.setstate( s.failbit );
                                    ^
Libraries/BasicLib/BasicLibString.h:127:22: warning: code should be clang-formatted [-Wclang-format-violations]
            return n;
                     ^
Libraries/BasicLib/BasicLibString.h:128:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibString.h:130:16: warning: code should be clang-formatted [-Wclang-format-violations]
        char c;
               ^
Libraries/BasicLib/BasicLibString.h:131:22: warning: code should be clang-formatted [-Wclang-format-violations]
        uint64 t = 0;
                     ^
Libraries/BasicLib/BasicLibString.h:133:35: warning: code should be clang-formatted [-Wclang-format-violations]
        // continue reading digits
                                  ^
Libraries/BasicLib/BasicLibString.h:134:14: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
             ^
Libraries/BasicLib/BasicLibString.h:134:15: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
              ^
Libraries/BasicLib/BasicLibString.h:134:24: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
                       ^
Libraries/BasicLib/BasicLibString.h:134:33: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
                                ^
Libraries/BasicLib/BasicLibString.h:134:35: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
                                  ^
Libraries/BasicLib/BasicLibString.h:134:37: warning: code should be clang-formatted [-Wclang-format-violations]
        while( isdigit( s.peek() ) )
                                    ^
Libraries/BasicLib/BasicLibString.h:135:10: warning: code should be clang-formatted [-Wclang-format-violations]
        {
         ^
Libraries/BasicLib/BasicLibString.h:136:20: warning: code should be clang-formatted [-Wclang-format-violations]
            s >> c;
                   ^
Libraries/BasicLib/BasicLibString.h:137:36: warning: code should be clang-formatted [-Wclang-format-violations]
            t = t * 10 + (c - '0');
                                   ^
Libraries/BasicLib/BasicLibString.h:138:10: warning: code should be clang-formatted [-Wclang-format-violations]
        }
         ^
Libraries/BasicLib/BasicLibString.h:140:15: warning: code should be clang-formatted [-Wclang-format-violations]
        n = t;
              ^
Libraries/BasicLib/BasicLibString.h:142:18: warning: code should be clang-formatted [-Wclang-format-violations]
        return n;
                 ^
Libraries/BasicLib/BasicLibString.h:143:6: warning: code should be clang-formatted [-Wclang-format-violations]
    }
     ^
Libraries/BasicLib/BasicLibString.h:146:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
Libraries/BasicLib/BasicLibString.h:150:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
        ^
Libraries/BasicLib/BasicLibString.h:150:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
         ^
Libraries/BasicLib/BasicLibString.h:150:24: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
                       ^
Libraries/BasicLib/BasicLibString.h:151:29: warning: code should be clang-formatted [-Wclang-format-violations]
inline std::string tostring( const type& p_type, size_t p_width = 0 )
                            ^
Libraries/BasicLib/BasicLibString.h:151:40: warning: code should be clang-formatted [-Wclang-format-violations]
inline std::string tostring( const type& p_type, size_t p_width = 0 )
                                       ^
Libraries/BasicLib/BasicLibString.h:151:41: warning: code should be clang-formatted [-Wclang-format-violations]
inline std::string tostring( const type& p_type, size_t p_width = 0 )
                                        ^
Libraries/BasicLib/BasicLibString.h:151:68: warning: code should be clang-formatted [-Wclang-format-violations]
inline std::string tostring( const type& p_type, size_t p_width = 0 )
                                                                   ^
Libraries/BasicLib/BasicLibString.h:151:70: warning: code should be clang-formatted [-Wclang-format-violations]
inline std::string tostring( const type& p_type, size_t p_width = 0 )
                                                                     ^
Libraries/BasicLib/BasicLibString.h:152:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibString.h:153:27: warning: code should be clang-formatted [-Wclang-format-violations]
    std::stringstream str;
                          ^
Libraries/BasicLib/BasicLibString.h:154:12: warning: code should be clang-formatted [-Wclang-format-violations]
    insert( str, p_type );
           ^
Libraries/BasicLib/BasicLibString.h:154:24: warning: code should be clang-formatted [-Wclang-format-violations]
    insert( str, p_type );
                       ^
Libraries/BasicLib/BasicLibString.h:154:27: warning: code should be clang-formatted [-Wclang-format-violations]
    insert( str, p_type );
                          ^
Libraries/BasicLib/BasicLibString.h:156:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // if string is larger than width, just return the whole thing.
                                                                   ^
Libraries/BasicLib/BasicLibString.h:157:7: warning: code should be clang-formatted [-Wclang-format-violations]
    if( str.str().size() >= p_width )
      ^
Libraries/BasicLib/BasicLibString.h:157:8: warning: code should be clang-formatted [-Wclang-format-violations]
    if( str.str().size() >= p_width )
       ^
Libraries/BasicLib/BasicLibString.h:157:36: warning: code should be clang-formatted [-Wclang-format-violations]
    if( str.str().size() >= p_width )
                                   ^
Libraries/BasicLib/BasicLibString.h:157:38: warning: code should be clang-formatted [-Wclang-format-violations]
    if( str.str().size() >= p_width )
                                     ^
Libraries/BasicLib/BasicLibString.h:158:26: warning: code should be clang-formatted [-Wclang-format-violations]
        return str.str();
                         ^
Libraries/BasicLib/BasicLibString.h:160:61: warning: code should be clang-formatted [-Wclang-format-violations]
    // add as many spaces as needed after the string if not.
                                                            ^
Libraries/BasicLib/BasicLibString.h:161:36: warning: code should be clang-formatted [-Wclang-format-violations]
    return str.str() + std::string( p_width - str.str().size(), ' ' );
                                   ^
Libraries/BasicLib/BasicLibString.h:161:68: warning: code should be clang-formatted [-Wclang-format-violations]
    return str.str() + std::string( p_width - str.str().size(), ' ' );
                                                                   ^
Libraries/BasicLib/BasicLibString.h:164:9: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
        ^
Libraries/BasicLib/BasicLibString.h:164:10: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
         ^
Libraries/BasicLib/BasicLibString.h:164:24: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
                       ^
Libraries/BasicLib/BasicLibString.h:164:26: warning: code should be clang-formatted [-Wclang-format-violations]
template< typename type >
                         ^
Libraries/BasicLib/BasicLibString.h:165:20: warning: code should be clang-formatted [-Wclang-format-violations]
inline type totype( const std::string& p_string )
                   ^
Libraries/BasicLib/BasicLibString.h:165:38: warning: code should be clang-formatted [-Wclang-format-violations]
inline type totype( const std::string& p_string )
                                     ^
Libraries/BasicLib/BasicLibString.h:165:39: warning: code should be clang-formatted [-Wclang-format-violations]
inline type totype( const std::string& p_string )
                                      ^
Libraries/BasicLib/BasicLibString.h:165:48: warning: code should be clang-formatted [-Wclang-format-violations]
inline type totype( const std::string& p_string )
                                               ^
Libraries/BasicLib/BasicLibString.h:165:50: warning: code should be clang-formatted [-Wclang-format-violations]
inline type totype( const std::string& p_string )
                                                 ^
Libraries/BasicLib/BasicLibString.h:166:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibString.h:167:27: warning: code should be clang-formatted [-Wclang-format-violations]
    std::stringstream str( p_string );
                          ^
Libraries/BasicLib/BasicLibString.h:167:36: warning: code should be clang-formatted [-Wclang-format-violations]
    std::stringstream str( p_string );
                                   ^
Libraries/BasicLib/BasicLibString.h:167:39: warning: code should be clang-formatted [-Wclang-format-violations]
    std::stringstream str( p_string );
                                      ^
Libraries/BasicLib/BasicLibString.h:168:12: warning: code should be clang-formatted [-Wclang-format-violations]
    type t;
           ^
Libraries/BasicLib/BasicLibString.h:169:13: warning: code should be clang-formatted [-Wclang-format-violations]
    extract( str, t );
            ^
Libraries/BasicLib/BasicLibString.h:169:20: warning: code should be clang-formatted [-Wclang-format-violations]
    extract( str, t );
                   ^
Libraries/BasicLib/BasicLibString.h:169:23: warning: code should be clang-formatted [-Wclang-format-violations]
    extract( str, t );
                      ^
Libraries/BasicLib/BasicLibString.h:171:2: warning: code should be clang-formatted [-Wclang-format-violations]
}
 ^
Libraries/BasicLib/BasicLibString.h:176:28: warning: code should be clang-formatted [-Wclang-format-violations]
} // end namespace BasicLib
                           ^
Libraries/BasicLib/BasicLibTime.h:4:76: warning: code should be clang-formatted [-Wclang-format-violations]
// BasicLibTime.h - This file contains all time-based classes and functions
                                                                           ^
Libraries/BasicLib/BasicLibTime.h:13:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibTime.h:14:2: warning: code should be clang-formatted [-Wclang-format-violations]
{
 ^
Libraries/BasicLib/BasicLibTime.h:17:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.h:18:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // These functions get a time value. The Actual meaning of this 
                                                                   ^
Libraries/BasicLib/BasicLibTime.h:19:59: warning: code should be clang-formatted [-Wclang-format-violations]
    // time is undefined; it is only meant to be relative.
                                                          ^
Libraries/BasicLib/BasicLibTime.h:20:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.h:21:24: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 GetTimeMS();
                       ^
Libraries/BasicLib/BasicLibTime.h:22:23: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 GetTimeS();
                      ^
Libraries/BasicLib/BasicLibTime.h:23:23: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 GetTimeM();
                      ^
Libraries/BasicLib/BasicLibTime.h:24:23: warning: code should be clang-formatted [-Wclang-format-violations]
    sint64 GetTimeH();
                      ^
Libraries/BasicLib/BasicLibTime.h:27:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.h:28:59: warning: code should be clang-formatted [-Wclang-format-violations]
    // This prints a timestamp in 24 hours hh:mm:ss format
                                                          ^
Libraries/BasicLib/BasicLibTime.h:29:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.h:30:29: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string TimeStamp();
                            ^
Libraries/BasicLib/BasicLibTime.h:33:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.h:34:52: warning: code should be clang-formatted [-Wclang-format-violations]
    // This prints a datestamp in YYYY:MM:DD format
                                                   ^
Libraries/BasicLib/BasicLibTime.h:35:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.h:36:29: warning: code should be clang-formatted [-Wclang-format-violations]
    std::string DateStamp();
                            ^
Libraries/BasicLib/BasicLibTime.h:39:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.h:40:24: warning: code should be clang-formatted [-Wclang-format-violations]
    //  The Timer Class
                       ^
Libraries/BasicLib/BasicLibTime.h:41:68: warning: code should be clang-formatted [-Wclang-format-violations]
    // ============================================================
                                                                   ^
Libraries/BasicLib/BasicLibTime.h:42:16: warning: code should be clang-formatted [-Wclang-format-violations]
    class Timer
               ^
Libraries/BasicLib/BasicLibTime.h:43:6: warning: code should be clang-formatted [-Wclang-format-violations]
    {
     ^
Libraries/BasicLib/BasicLibTime.h:44:12: warning: code should be clang-formatted [-Wclang-format-violations]
    public:
           ^
Libraries/BasicLib/BasicLibTime.h:46:17: warning: code should be clang-formatted [-Wclang-format-violations]
        Timer();
                ^
Libraries/BasicLib/BasicLibTime.h:48:20: warning: code should be clang-formatted [-Wclang-format-violations]
        void Reset( sint64 p_timepassed = 0 );
                   ^
Libraries/BasicLib/BasicLibTime.h:48:44: warning: code should be clang-formatted [-Wclang-format-violations]
        void Reset( sint64 p_timepassed = 0 );
                                           ^
Libraries/BasicLib/BasicLibTime.h:48:47: warning: code should be clang-formatted [-Wclang-format-violations]
        void Reset( sint64 p_timepassed = 0 );
                                              ^
Libraries/BasicLib/BasicLibTime.h:50:24: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 GetMS();
                       ^
Libraries/BasicLib/BasicLibTime.h:51:23: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 GetS();
                      ^
Libraries/BasicLib/BasicLibTime.h:52:23: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 GetM();
                      ^
Libraries/BasicLib/BasicLibTime.h:53:23: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 GetH();
                      ^
Libraries/BasicLib/BasicLibTime.h:54:23: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 GetD();
                      ^
Libraries/BasicLib/BasicLibTime.h:55:23: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 GetY();
                      ^
Libraries/BasicLib/BasicLibTime.h:57:33: warning: code should be clang-formatted [-Wclang-format-violations]
        std::string GetString();
                                ^
Libraries/BasicLib/BasicLibTime.h:61:15: warning: code should be clang-formatted [-Wclang-format-violations]
    protected:
              ^
Libraries/BasicLib/BasicLibTime.h:63:70: warning: code should be clang-formatted [-Wclang-format-violations]
        // this is the system time at which the timer was initialized
                                                                     ^
Libraries/BasicLib/BasicLibTime.h:64:27: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 m_inittime;
                          ^
Libraries/BasicLib/BasicLibTime.h:66:62: warning: code should be clang-formatted [-Wclang-format-violations]
        // this is the official "starting time" of the timer.
                                                             ^
Libraries/BasicLib/BasicLibTime.h:67:28: warning: code should be clang-formatted [-Wclang-format-violations]
        sint64 m_starttime;
                           ^
Libraries/BasicLib/BasicLibTime.h:68:7: warning: code should be clang-formatted [-Wclang-format-violations]
    };
      ^
Libraries/BasicLib/BasicLibTime.h:71:27: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 seconds( sint64 t )   { return t * 1000; }
                          ^
Libraries/BasicLib/BasicLibTime.h:71:36: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 seconds( sint64 t )   { return t * 1000; }
                                   ^
Libraries/BasicLib/BasicLibTime.h:71:38: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 seconds( sint64 t )   { return t * 1000; }
                                     ^
Libraries/BasicLib/BasicLibTime.h:71:61: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 seconds( sint64 t )   { return t * 1000; }
                                                            ^
Libraries/BasicLib/BasicLibTime.h:72:27: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 minutes( sint64 t )   { return t * 60 * 1000; }
                          ^
Libraries/BasicLib/BasicLibTime.h:72:36: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 minutes( sint64 t )   { return t * 60 * 1000; }
                                   ^
Libraries/BasicLib/BasicLibTime.h:72:38: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 minutes( sint64 t )   { return t * 60 * 1000; }
                                     ^
Libraries/BasicLib/BasicLibTime.h:72:66: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 minutes( sint64 t )   { return t * 60 * 1000; }
                                                                 ^
Libraries/BasicLib/BasicLibTime.h:73:25: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 hours( sint64 t )     { return t * 60 * 60 * 1000; }
                        ^
Libraries/BasicLib/BasicLibTime.h:73:34: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 hours( sint64 t )     { return t * 60 * 60 * 1000; }
                                 ^
Libraries/BasicLib/BasicLibTime.h:73:36: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 hours( sint64 t )     { return t * 60 * 60 * 1000; }
                                   ^
Libraries/BasicLib/BasicLibTime.h:73:71: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 hours( sint64 t )     { return t * 60 * 60 * 1000; }
                                                                      ^
Libraries/BasicLib/BasicLibTime.h:74:24: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 days( sint64 t )      { return t * 24 * 60 * 60 * 1000; }
                       ^
Libraries/BasicLib/BasicLibTime.h:74:33: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 days( sint64 t )      { return t * 24 * 60 * 60 * 1000; }
                                ^
Libraries/BasicLib/BasicLibTime.h:74:35: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 days( sint64 t )      { return t * 24 * 60 * 60 * 1000; }
                                  ^
Libraries/BasicLib/BasicLibTime.h:74:76: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 days( sint64 t )      { return t * 24 * 60 * 60 * 1000; }
                                                                           ^
Libraries/BasicLib/BasicLibTime.h:75:25: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 weeks( sint64 t )     { return t * 7 * 24 * 60 * 60 * 1000; }
                        ^
Libraries/BasicLib/BasicLibTime.h:75:34: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 weeks( sint64 t )     { return t * 7 * 24 * 60 * 60 * 1000; }
                                 ^
Libraries/BasicLib/BasicLibTime.h:75:36: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 weeks( sint64 t )     { return t * 7 * 24 * 60 * 60 * 1000; }
                                   ^
Libraries/BasicLib/BasicLibTime.h:75:80: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 weeks( sint64 t )     { return t * 7 * 24 * 60 * 60 * 1000; }
                                                                               ^
Libraries/BasicLib/BasicLibTime.h:76:25: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 years( sint64 t )     { return t * 365 * 24 * 60 * 60 * 1000; }
                        ^
Libraries/BasicLib/BasicLibTime.h:76:34: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 years( sint64 t )     { return t * 365 * 24 * 60 * 60 * 1000; }
                                 ^
Libraries/BasicLib/BasicLibTime.h:76:36: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 years( sint64 t )     { return t * 365 * 24 * 60 * 60 * 1000; }
                                   ^
Libraries/BasicLib/BasicLibTime.h:76:82: warning: code should be clang-formatted [-Wclang-format-violations]
    inline sint64 years( sint64 t )     { return t * 365 * 24 * 60 * 60 * 1000; }
                                                                                 ^
Libraries/BasicLib/BasicLibTime.h:79:28: warning: code should be clang-formatted [-Wclang-format-violations]
} // end namespace BasicLib
                           ^
Libraries/BasicLib/BasicLibTime.h:82:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
Libraries/BasicLib/BasicLibTypes.h:4:56: warning: code should be clang-formatted [-Wclang-format-violations]
// BasicLibTypes.h - This file contains the basic types
                                                       ^
Libraries/BasicLib/BasicLibTypes.h:9:1: warning: code should be clang-formatted [-Wclang-format-violations]
#include <iostream>
^
Libraries/BasicLib/BasicLibTypes.h:14:19: warning: code should be clang-formatted [-Wclang-format-violations]
namespace BasicLib
                  ^
Libraries/BasicLib/BasicLibTypes.h:17:13: warning: code should be clang-formatted [-Wclang-format-violations]
#ifdef WIN32
            ^
Libraries/BasicLib/BasicLibTypes.h:18:25: warning: code should be clang-formatted [-Wclang-format-violations]
    #if _MSC_VER >= 1300
                        ^
Libraries/BasicLib/BasicLibTypes.h:19:29: warning: code should be clang-formatted [-Wclang-format-violations]
        #define GOODCOMPILER
                            ^
Libraries/BasicLib/BasicLibTypes.h:20:10: warning: code should be clang-formatted [-Wclang-format-violations]
    #else
         ^
Libraries/BasicLib/BasicLibTypes.h:21:31: warning: code should be clang-formatted [-Wclang-format-violations]
        #define CRAPPYCOMPILER
                              ^
Libraries/BasicLib/BasicLibTypes.h:25:16: warning: code should be clang-formatted [-Wclang-format-violations]
#ifdef __GNUC__
               ^
Libraries/BasicLib/BasicLibTypes.h:27:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
Libraries/BasicLib/BasicLibTypes.h:37:16: warning: code should be clang-formatted [-Wclang-format-violations]
#ifdef __GNUC__
               ^
Libraries/BasicLib/BasicLibTypes.h:38:34: warning: code should be clang-formatted [-Wclang-format-violations]
    typedef long long int sint64;
                                 ^
Libraries/BasicLib/BasicLibTypes.h:40:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
Libraries/BasicLib/BasicLibTypes.h:46:13: warning: code should be clang-formatted [-Wclang-format-violations]
#ifdef WIN32
            ^
Libraries/BasicLib/BasicLibTypes.h:47:28: warning: code should be clang-formatted [-Wclang-format-violations]
    typedef __int64 sint64;
                           ^
Libraries/BasicLib/BasicLibTypes.h:49:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
Libraries/BasicLib/BasicLibTypes.h:57:29: warning: code should be clang-formatted [-Wclang-format-violations]
typedef unsigned char uint8;
                            ^
Libraries/BasicLib/BasicLibTypes.h:60:53: warning: code should be clang-formatted [-Wclang-format-violations]
const double pi = 3.1415926535897932384626433832795;
                                                    ^
Libraries/BasicLib/BasicLibTypes.h:68:28: warning: code should be clang-formatted [-Wclang-format-violations]
} // end namespace BasicLib
                           ^
Libraries/BasicLib/BasicLibTypes.h:71:7: warning: code should be clang-formatted [-Wclang-format-violations]
#endif
      ^
